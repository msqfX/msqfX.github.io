(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{346:function(s,a,t){"use strict";t.r(a);var n=t(0),v=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"java-基础小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-基础小结"}},[s._v("#")]),s._v(" Java 基础小结")]),s._v(" "),t("h2",{attrs:{id:"java-基础概念与常识"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-基础概念与常识"}},[s._v("#")]),s._v(" Java 基础概念与常识")]),s._v(" "),t("h3",{attrs:{id:"什么是-java"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-java"}},[s._v("#")]),s._v(" 什么是 Java ?")]),s._v(" "),t("p",[s._v("Java 是 "),t("code",[s._v("1995")]),s._v(" 年由 "),t("code",[s._v("sun")]),s._v(" 公司推出的一门高级语言。")]),s._v(" "),t("p",[s._v("Java 的四个基本特性是"),t("strong",[s._v("面向对象")]),s._v("、"),t("strong",[s._v("平台无关性")]),s._v("、"),t("strong",[s._v("安全性和简单性")]),s._v("。")]),s._v(" "),t("p",[s._v("具体特点如下:")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("简单易学。")])]),s._v(" "),t("li",[t("p",[s._v("平台无关性。")])]),s._v(" "),t("li",[t("p",[t("code",[s._v("面向对象")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("面向对象是一种程序设计技术，以木匠工作为例，使用面向对象方式实现的木匠的工作关注重点永远是制作椅子，其次才是工具。")])]),s._v(" "),t("li",[t("p",[s._v("而面向过程则优先关注制作工具。")])]),s._v(" "),t("li",[t("p",[s._v("与 "),t("code",[s._v("C++")]),s._v(" 不同的是，"),t("code",[s._v("Java")]),s._v(" 不支持多继承，取而代之的是更加简单的接口的概念。")])]),s._v(" "),t("li",[t("p",[s._v("面向对象三大特性: 封装、多态、继承。")])])])]),s._v(" "),t("li",[t("p",[s._v("编译与解释并存")])]),s._v(" "),t("li",[t("p",[s._v("可靠性")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Java")]),s._v(" 通过早期检测以及运行时检测消除了容易出错的情况。")]),s._v(" "),t("li",[s._v("与 "),t("code",[s._v("C++")]),s._v(" 不同的是，"),t("code",[s._v("C++")]),s._v(" 在操作数组、字符串方式上利用指针模型避免了重写内存或者损坏数据的问题。")])])]),s._v(" "),t("li",[t("p",[s._v("安全性: Java 适用于网络/分布式环境，为了达到这个目标，Java 在防病毒，防篡改做出很大的努力。")])]),s._v(" "),t("li",[t("p",[s._v("支持网络编程并且非常方便。")])]),s._v(" "),t("li",[t("p",[s._v("支持多线程。")])])]),s._v(" "),t("blockquote",[t("p",[t("em",[t("strong",[s._v("什么是【编译型】语言和【解释型】语言？")])])]),s._v(" "),t("p",[t("strong",[s._v("编译型")]),s._v("："),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[s._v("编译型语言"),t("OutboundLink")],1),s._v(" 会通过"),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%B7%A8%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[s._v("编译器"),t("OutboundLink")],1),s._v("将源代码"),t("strong",[s._v("一次性翻译")]),s._v("成可被该平台执行的机器码。一般情况下，编译语言的"),t("strong",[s._v("执行速度比较快，开发效率比较低")]),s._v("。常见的编译性语言有 C、C++、Go、Rust 等等。")]),s._v(" "),t("p",[t("strong",[s._v("解释型")]),s._v("："),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80",target:"_blank",rel:"noopener noreferrer"}},[s._v("解释型语言"),t("OutboundLink")],1),s._v("会通过"),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%9B%B4%E8%AD%AF%E5%99%A8",target:"_blank",rel:"noopener noreferrer"}},[s._v("解释器"),t("OutboundLink")],1),t("strong",[s._v("一句一句的将代码解释")]),s._v("（interpret）为机器代码后再执行。解释型语言"),t("strong",[s._v("开发效率比较快，执行速度比较慢")]),s._v("。常见的解释性语言有 Python、JavaScript、PHP 等等。")]),s._v(" "),t("p",[s._v("而 Java 是编译与解释并存，因为 "),t("code",[s._v("java")]),s._v(" 源代码运行时需要先编译成为字节码文件 "),t("code",[s._v("(.class)")]),s._v("，然后再通过解释器翻译成机器码运行。")])]),s._v(" "),t("h3",{attrs:{id:"java-的三种技术架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-的三种技术架构"}},[s._v("#")]),s._v(" Java 的三种技术架构")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("JavaSE")]),s._v("：标准版，即学生时期学习时使用的版本。")]),s._v(" "),t("li",[t("code",[s._v("JavaEE")]),s._v("："),t("code",[s._v("web")]),s._v(" 开发采用的技术架构。")]),s._v(" "),t("li",[t("code",[s._v("JavaME")]),s._v("：为嵌入式设备提供的解决方案")])]),s._v(" "),t("h3",{attrs:{id:"什么是-jvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jvm"}},[s._v("#")]),s._v(" 什么是 JVM ?")]),s._v(" "),t("p",[s._v("Java 虚拟机（JVM）是"),t("strong",[s._v("运行 Java 字节码的虚拟机")]),s._v("。")]),s._v(" "),t("p",[s._v("JVM 有针对不同系统的特定实现（Windows，Linux，macOS），"),t("strong",[s._v("目的是使用相同的字节码，它们都会给出相同的结果")]),s._v("。")]),s._v(" "),t("p",[s._v("字节码和不同系统的 JVM 实现是 Java 语言 “一次编译，随处可以运行” 的关键所在。")]),s._v(" "),t("p",[t("strong",[s._v("JVM 并不是只有一种！只要遵守 "),t("code",[s._v("JVM")]),s._v(" 设计规范就能开发出自己所需要的 "),t("code",[s._v("Java")]),s._v(" 虚拟机")]),s._v("，我们日常所用的 "),t("code",[s._v("HotSpot VM")]),s._v(" 只是其中一种实现而已。")]),s._v(" "),t("h3",{attrs:{id:"什么是-jdk"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jdk"}},[s._v("#")]),s._v(" 什么是 JDK ?")]),s._v(" "),t("p",[s._v("JDK(Java Development Kit) 是 "),t("code",[s._v("Java")]),s._v(" "),t("strong",[s._v("开发工具包")]),s._v("，包含了 "),t("code",[s._v("JRE")]),s._v(" 所有的东西，所以作为开发人员，只需要安装 "),t("code",[s._v("JDK")]),s._v(" 即可。")]),s._v(" "),t("h3",{attrs:{id:"什么是-jre"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-jre"}},[s._v("#")]),s._v(" 什么是 JRE ?")]),s._v(" "),t("p",[s._v("JRE(Java Runtime Environment) 是 "),t("code",[s._v("Java")]),s._v(" "),t("strong",[s._v("运行环境")]),s._v("，包含运行所需要的类库以及 JVM。")]),s._v(" "),t("p",[s._v("你可能认为如果仅仅要运行 "),t("code",[s._v("Java")]),s._v(" 程序，安装 "),t("code",[s._v("JRE")]),s._v(" 即可，但是某些 "),t("code",[s._v("web")]),s._v(" 程序例如：需要将 "),t("code",[s._v("JSP")]),s._v(" 转换为 "),t("code",[s._v("Java servlet")]),s._v(" 就需要 "),t("code",[s._v("jdk")]),s._v(" 编译了，所以保守起见，无论运行还是开发，我们都建议在操作系统上安装 "),t("code",[s._v("JDK")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"java-与-c-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-与-c-的区别"}},[s._v("#")]),s._v(" Java 与 C++ 的区别")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("Java")]),s._v(" 没有指针的概念，不能像 "),t("code",[s._v("C++")]),s._v(" 一样直接操作内存，所以"),t("strong",[s._v("更加安全")]),s._v("。")]),s._v(" "),t("li",[t("code",[s._v("Java")]),s._v(" "),t("strong",[s._v("不支持多继承")]),s._v("，但是可以通过多接口实现多继承。")]),s._v(" "),t("li",[t("code",[s._v("Java")]),s._v(" "),t("strong",[s._v("只支持方法重载")]),s._v("，不像 "),t("code",[s._v("C++")]),s._v(" 一样可以运算符重载。")]),s._v(" "),t("li",[t("code",[s._v("Java")]),s._v(" "),t("strong",[s._v("有自动内存管理垃圾回收机制")]),s._v(" "),t("code",[s._v("(GC)")]),s._v("，无需像 "),t("code",[s._v("C++")]),s._v(" 一样手动释放。")])]),s._v(" "),t("blockquote",[t("p",[s._v("什么是 GC ?")])]),s._v(" "),t("h2",{attrs:{id:"基本语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),t("h3",{attrs:{id:"注释有哪几种形式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注释有哪几种形式"}},[s._v("#")]),s._v(" 注释有哪几种形式？")]),s._v(" "),t("p",[s._v("有三种：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("单行注释")]),s._v("：通常用于解释方法内某单行代码的作用。("),t("code",[s._v("//")]),s._v(")")]),s._v(" "),t("li",[t("strong",[s._v("多行注释")]),s._v("：通常用于解释一段代码的作用。（"),t("code",[s._v("/* */")]),s._v(")")]),s._v(" "),t("li",[t("strong",[s._v("文档注释")]),s._v("：通常用于生成 Java 开发文档。（即 "),t("code",[s._v("java doc")]),s._v("）")])]),s._v(" "),t("h3",{attrs:{id:"标识符和关键字的区别是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#标识符和关键字的区别是什么"}},[s._v("#")]),s._v(" 标识符和关键字的区别是什么？")]),s._v(" "),t("p",[t("code",[s._v("标识符")]),s._v("：简单来说就是一个名字，比如 某个店铺名。")]),s._v(" "),t("p",[t("code",[s._v("关键字")]),s._v("：被赋予特殊含义的标识符，比如 警察局，医院。")]),s._v(" "),t("p",[s._v("注意：所有"),t("strong",[s._v("关键字都是小写")]),s._v("，在 IDE 中会以特殊颜色展示。")]),s._v(" "),t("h3",{attrs:{id:"java-有哪些关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-有哪些关键字"}},[s._v("#")]),s._v(" Java 有哪些关键字？")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cmty256.github.io/imgs-blog/Java/image.u47c2l50zow.webp",alt:"image"}})]),s._v(" "),t("h3",{attrs:{id:"访问控制关键字解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问控制关键字解析"}},[s._v("#")]),s._v(" 访问控制关键字解析")]),s._v(" "),t("p",[s._v("它们的作用是控制类、方法和变量的访问权限。")]),s._v(" "),t("p",[t("code",[s._v("Java")]),s._v(" 中的访问控制关键字主要有以下四个：")]),s._v(" "),t("ol",[t("li",[t("code",[s._v("public")]),s._v(": 表示公共的，"),t("strong",[s._v("任何地方都可以访问")]),s._v("。在"),t("strong",[s._v("同一项目中或其他项目中")]),s._v("，都可以通过引入类或模块进行访问。")]),s._v(" "),t("li",[t("code",[s._v("protected")]),s._v(": 表示受保护的，只有"),t("strong",[s._v("本类和其子类以及同一包中的其他类")]),s._v("可以访问。在其他包中的子类不可以访问。")]),s._v(" "),t("li",[t("code",[s._v("default")]),s._v("（即不写访问控制符）: 表示默认的，只有"),t("strong",[s._v("本类和同一包中的其他类")]),s._v("可以访问，其他包中的类都不可以访问。")]),s._v(" "),t("li",[t("code",[s._v("private")]),s._v(": 表示私有的，"),t("strong",[s._v("只有本类中可以访问")]),s._v("，其他类都不可以访问。")])]),s._v(" "),t("p",[t("em",[s._v("可见性")])]),s._v(" "),t("p",[s._v("同一个类 -> 同一个包 -> 子类 -> 全局范围")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("可见性")]),s._v(" "),t("th",[s._v("private")]),s._v(" "),t("th",[s._v("default")]),s._v(" "),t("th",[s._v("protected")]),s._v(" "),t("th",[s._v("public")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("同一个类中")]),s._v(" "),t("td",[s._v("✔️")]),s._v(" "),t("td",[s._v("✔️")]),s._v(" "),t("td",[s._v("✔️")]),s._v(" "),t("td",[s._v("✔️")])]),s._v(" "),t("tr",[t("td",[s._v("同一个包中")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("✔️")]),s._v(" "),t("td",[s._v("✔️")])]),s._v(" "),t("tr",[t("td",[s._v("子类中")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("✔️")]),s._v(" "),t("td",[s._v("✔️")])]),s._v(" "),t("tr",[t("td",[s._v("全局范围")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("❌")]),s._v(" "),t("td",[s._v("✔️")])])])]),s._v(" "),t("h3",{attrs:{id:"final-关键字解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final-关键字解析"}},[s._v("#")]),s._v(" final 关键字解析")]),s._v(" "),t("p",[t("code",[s._v("final")]),s._v(" 是 Java 中的一个关键字，可以用来修饰类、方法和变量，表示它们不可被修改。")]),s._v(" "),t("blockquote",[t("p",[s._v("被 "),t("code",[s._v("final")]),s._v(" 关键字修饰会怎么样？")])]),s._v(" "),t("ol",[t("li",[t("code",[s._v("final")]),s._v(" 修饰类：表示该"),t("strong",[s._v("类是不可继承的")]),s._v("，即不能有子类。")]),s._v(" "),t("li",[t("code",[s._v("final")]),s._v(" 修饰方法：表示该"),t("strong",[s._v("方法不能被子类重写")]),s._v("，即不能被修改。")]),s._v(" "),t("li",[t("code",[s._v("final")]),s._v(" 修饰变量：表示该变量是一个"),t("strong",[s._v("常量")]),s._v("，只能被赋值一次，不能被修改。")])]),s._v(" "),t("p",[t("code",[s._v("final")]),s._v(" 关键字的主要作用如下：")]),s._v(" "),t("ul",[t("li",[s._v("提高代码的安全性："),t("code",[s._v("final")]),s._v(" 关键字可以保证类、方法和变量在程序运行时不被修改，从而提高了代码的安全性和可维护性。")]),s._v(" "),t("li",[s._v("提高代码的性能："),t("code",[s._v("final")]),s._v(" 关键字可以使得编译器在编译时进行优化，从而提高了代码的性能。")]),s._v(" "),t("li",[s._v("明确代码的含义："),t("code",[s._v("final")]),s._v("关键字可以使得代码的含义更加明确，从而方便代码的维护和理解。")])]),s._v(" "),t("h3",{attrs:{id:"if-和-else-if"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#if-和-else-if"}},[s._v("#")]),s._v(" if 和 else if")]),s._v(" "),t("p",[t("code",[s._v("if")]),s._v(" 和 "),t("code",[s._v("else if")]),s._v(" 是用于条件判断的控制结构。它们用于在不同的条件下执行不同的代码块。")]),s._v(" "),t("p",[s._v("基本的语法如下：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 condition1 为真，执行这里的代码块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("condition2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果 condition1 为假，而 condition2 为真，执行这里的代码块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果前面的条件都为假，执行这里的代码块")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("p",[s._v("在执行时，首先判断 "),t("code",[s._v("condition1")]),s._v(" 是否为真。如果为真，执行 "),t("code",[s._v("if")]),s._v(" 代码块；如果为假，继续判断 "),t("code",[s._v("condition2")]),s._v("。如果 "),t("code",[s._v("condition2")]),s._v(" 为真，执行 "),t("code",[s._v("else if")]),s._v(" 代码块；如果 "),t("code",[s._v("condition2")]),s._v(" 为假，执行 "),t("code",[s._v("else")]),s._v(" 代码块。")]),s._v(" "),t("p",[t("strong",[s._v("重要的一点是，一旦某一个条件为真，后续的 "),t("code",[s._v("else if")]),s._v(" 或 "),t("code",[s._v("else")]),s._v(" 都不会再执行，因为 Java 中的 "),t("code",[s._v("if - else if - else")]),s._v(" 结构是互斥的。")])]),s._v(" "),t("p",[s._v("以下是一个简单的例子：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" number "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("number "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Number is positive"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("number "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Number is negative"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Number is zero"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 Number is positive")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br")])]),t("h2",{attrs:{id:"变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),t("h3",{attrs:{id:"成员变量与局部变量的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#成员变量与局部变量的区别"}},[s._v("#")]),s._v(" 成员变量与局部变量的区别？")]),s._v(" "),t("p",[s._v("主要是四个区别：")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("从语法形式上看")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("成员变量是属于类的，")]),s._v(" "),t("li",[s._v("而局部变量是在代码块或方法中定义的变量或是方法的参数。")]),s._v(" "),t("li",[s._v("成员变量可以被 "),t("code",[s._v("public")]),s._v(","),t("code",[s._v("private")]),s._v(","),t("code",[s._v("static")]),s._v(" 等修饰符所修饰，")]),s._v(" "),t("li",[s._v("而局部变量不能被"),t("strong",[s._v("访问控制修饰符及 "),t("code",[s._v("static")])]),s._v(" 所修饰；")]),s._v(" "),t("li",[s._v("但是，成员变量和局部变量都能被 "),t("code",[s._v("final")]),s._v(" 所修饰。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("从变量在内存中的存储方式来看")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("如果成员变量是使用 "),t("code",[s._v("static")]),s._v(" 修饰的，那么这个成员变量是属于类的，")])]),s._v(" "),t("li",[t("p",[s._v("如果没有使用 "),t("code",[s._v("static")]),s._v(" 修饰，这个成员变量是属于实例的。")]),s._v(" "),t("blockquote",[t("p",[s._v("对象存在于堆内存，是【类的实例化】")]),s._v(" "),t("p",[s._v("局部变量则存在于栈内存，是【在方法里定义的】")])])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("从变量在内存中的生存时间上看")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("成员变量是对象的一部分，它随着对象的创建而存在，")])]),s._v(" "),t("li",[t("p",[s._v("而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。")])])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("从变量是否有默认值来看")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 "),t("code",[s._v("final")]),s._v(" 修饰的成员变量也必须显式地赋值），")]),s._v(" "),t("li",[s._v("而局部变量则不会自动赋值。（Java 编译器不会对局部变量进行默认初始化，因为这些变量的值只在方法或代码块中使用，没有默认值。"),t("strong",[s._v("如果程序员没有显式地初始化局部变量，则编译器会在编译时抛出错误")]),s._v("。即使定义包装类型的局部变量也一样）")])])])]),s._v(" "),t("h3",{attrs:{id:"静态变量有什么用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态变量有什么用"}},[s._v("#")]),s._v(" 静态变量有什么用？")]),s._v(" "),t("p",[s._v("静态变量也就是被 "),t("code",[s._v("static")]),s._v(" 关键字修饰的变量。")]),s._v(" "),t("p",[s._v("它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，静态变量只会被分配一次内存（属于类，只加载一下），即使创建多个对象，这样可以节省内存。")]),s._v(" "),t("p",[s._v("静态变量是通过类名来访问的，例如 "),t("code",[s._v("StaticVariableExample.staticVar")]),s._v("（如果被 "),t("code",[s._v("private")]),s._v(" 关键字修饰就无法这样访问了）。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("StaticVariableExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 静态变量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" staticVar "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("通常情况下，静态变量会被 "),t("code",[s._v("final")]),s._v(" 关键字修饰成为常量。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ConstantVariableExample")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 常量")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" constantVar "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("h3",{attrs:{id:"字符型常量和字符串常量的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符型常量和字符串常量的区别"}},[s._v("#")]),s._v(" 字符型常量和字符串常量的区别？")]),s._v(" "),t("ol",[t("li",[s._v("形式:\n"),t("ul",[t("li",[s._v("字符常量是"),t("strong",[s._v("单引号")]),s._v("引起的一个字符，")]),s._v(" "),t("li",[s._v("字符串常量是"),t("strong",[s._v("双引号")]),s._v("引起的 0 个或若干个字符。")])])]),s._v(" "),t("li",[s._v("含义:\n"),t("ul",[t("li",[s._v("字符常量相当于一个"),t("strong",[s._v("整型值")]),s._v("( ASCII 值),可以参加表达式运算;")]),s._v(" "),t("li",[s._v("字符串常量代表一个"),t("strong",[s._v("地址值")]),s._v("(该字符串在内存中存放位置)。")])])]),s._v(" "),t("li",[s._v("占内存大小：\n"),t("ul",[t("li",[s._v("字符常量（"),t("code",[s._v("char")]),s._v("）只占 2 个字节;")]),s._v(" "),t("li",[s._v("字符串常量（"),t("code",[s._v("String")]),s._v("）占若干个字节。")])])])]),s._v(" "),t("blockquote",[t("p",[s._v("注意 "),t("code",[s._v("char")]),s._v(" 在 Java 中占两个字节。")])]),s._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[s._v("#")]),s._v(" 方法")]),s._v(" "),t("h3",{attrs:{id:"什么是方法的返回值-方法有哪几种类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是方法的返回值-方法有哪几种类型"}},[s._v("#")]),s._v(" 什么是方法的返回值?方法有哪几种类型？")]),s._v(" "),t("p",[t("strong",[s._v("方法的返回值")]),s._v(" 是指我们获取到的某个方法体中的代码执行后产生的结果！")]),s._v(" "),t("p",[s._v("有四种类型：")]),s._v(" "),t("ol",[t("li",[s._v("无参数无返回值的方法")]),s._v(" "),t("li",[s._v("有参数无返回值的方法")]),s._v(" "),t("li",[s._v("有返回值无参数的方法")]),s._v(" "),t("li",[s._v("有返回值有参数的方法")])]),s._v(" "),t("h3",{attrs:{id:"静态方法为什么不能调用非静态成员"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法为什么不能调用非静态成员"}},[s._v("#")]),s._v(" 静态方法为什么不能调用非静态成员?")]),s._v(" "),t("p",[s._v("这是因为")]),s._v(" "),t("ul",[t("li",[s._v("静态方法是属于类的，在类加载的时候就会分配内存，可以通过类名直接访问。而非静态成员属于实例对象，只有在对象实例化之后才存在，需要通过类的实例对象去访问。")]),s._v(" "),t("li",[s._v("在类的非静态成员不存在的时候静态方法就已经存在了，此时调用在内存中还不存在的非静态成员，属于非法操作。")])]),s._v(" "),t("h3",{attrs:{id:"静态方法和实例方法有何不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#静态方法和实例方法有何不同"}},[s._v("#")]),s._v(" 静态方法和实例方法有何不同？")]),s._v(" "),t("p",[t("strong",[s._v("1、调用方式")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("在外部调用静态方法时，可以使用 "),t("code",[s._v("类名.方法名")]),s._v(" 的方式，也可以使用 "),t("code",[s._v("对象.方法名")]),s._v(" 的方式，")])]),s._v(" "),t("li",[t("p",[s._v("而实例方法只有后面这种方式。也就是说，"),t("strong",[s._v("调用静态方法可以无需创建对象")]),s._v(" 。")])])]),s._v(" "),t("p",[s._v("2、访问类成员是否存在限制")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("静态方法在访问本类的成员时，只允许访问静态成员（即静态成员变量和静态方法），不允许访问实例成员（即实例成员变量和实例方法），")])]),s._v(" "),t("li",[t("p",[s._v("而实例方法不存在这个限制。")])])]),s._v(" "),t("h3",{attrs:{id:"重载和重写有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重载和重写有什么区别"}},[s._v("#")]),s._v(" 重载和重写有什么区别？")]),s._v(" "),t("p",[t("strong",[s._v("重载")]),s._v("就是同一个类中多个同名方法根据不同的传参来执行不同的逻辑处理。")]),s._v(" "),t("p",[t("strong",[s._v("重写")]),s._v("就是子类对父类方法的重新改造，外部样子不能改变，内部逻辑可以改变。")]),s._v(" "),t("table",[t("thead",[t("tr",[t("th",[s._v("区别点")]),s._v(" "),t("th",[s._v("重载方法")]),s._v(" "),t("th",[s._v("重写方法")])])]),s._v(" "),t("tbody",[t("tr",[t("td",[s._v("发生范围")]),s._v(" "),t("td",[s._v("同一个类")]),s._v(" "),t("td",[s._v("子类")])]),s._v(" "),t("tr",[t("td",[s._v("参数列表")]),s._v(" "),t("td",[s._v("必须修改")]),s._v(" "),t("td",[s._v("一定不能修改")])]),s._v(" "),t("tr",[t("td",[s._v("返回类型")]),s._v(" "),t("td",[s._v("可修改")]),s._v(" "),t("td",[s._v("子类方法返回值类型应比父类方法返回值类型更小或相等")])]),s._v(" "),t("tr",[t("td",[s._v("异常")]),s._v(" "),t("td",[s._v("可修改")]),s._v(" "),t("td",[s._v("子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等")])]),s._v(" "),t("tr",[t("td",[s._v("访问修饰")]),s._v(" "),t("td",[s._v("可修改")]),s._v(" "),t("td",[s._v("一定不能做更严格的限制（可以降低限制）")])]),s._v(" "),t("tr",[t("td",[s._v("发生阶段")]),s._v(" "),t("td",[s._v("编译期")]),s._v(" "),t("td",[s._v("运行期")])])])]),s._v(" "),t("h3",{attrs:{id:"什么是可变长参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是可变长参数"}},[s._v("#")]),s._v(" 什么是可变长参数？")]),s._v(" "),t("p",[s._v("可变长参数是指在函数或方法中，参数的数量是可变的，即函数或方法可以接受不确定数量的参数。")]),s._v(" "),t("p",[s._v("可变长参数必须放在参数列表的最后一个位置，并且使用省略号（"),t("code",[s._v("...")]),s._v("）来表示。")]),s._v(" "),t("p",[s._v("例如：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum1 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sum1 = 6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sum2 = 10")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum3 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sum3 = 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum4 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sum4 = 0")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("p",[s._v("也可传入数组")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" nums "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum5 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nums"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sum5 = 6")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("blockquote",[t("p",[s._v("遇到方法重载时会优先匹配固定参数还是可变参数的方法呢？")])]),s._v(" "),t("p",[s._v("会"),t("strong",[s._v("优先匹配固定参数的方法")]),s._v("，因为固定参数的方法匹配度更高。")]),s._v(" "),t("h2",{attrs:{id:"注解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[s._v("#")]),s._v(" 注解")]),s._v(" "),t("h3",{attrs:{id:"谈谈对-java-注解的理解-解决了什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈对-java-注解的理解-解决了什么问题"}},[s._v("#")]),s._v(" 谈谈对 Java 注解的理解，解决了什么问题？")]),s._v(" "),t("p",[s._v("注解可以看作是"),t("strong",[s._v("一种特殊的注释")]),s._v("，本质上是继承了 "),t("code",[s._v("Annotation")]),s._v(" 这一特殊接口，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。")]),s._v(" "),t("p",[s._v("注解只有被解析之后才会生效。我们可以使用 "),t("code",[s._v("JDK")]),s._v(" 提供的"),t("strong",[s._v("内置注解")]),s._v("也可以"),t("strong",[s._v("自定义注解")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("Java")]),s._v(" 注解的出现"),t("strong",[s._v("主要是为了解决代码中大量重复性工作")]),s._v("，例如：配置文件的读取、日志记录、数据校验等。可以帮助开发者更加方便地管理和维护代码（还可以实现一些特定的功能），提高程序的质量（和开发效率）。")]),s._v(" "),t("h3",{attrs:{id:"注解的解析方法有哪几种"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#注解的解析方法有哪几种"}},[s._v("#")]),s._v(" 注解的解析方法有哪几种？")]),s._v(" "),t("p",[s._v("常见的解析方法有两种：")]),s._v(" "),t("ul",[t("li",[t("p",[t("strong",[s._v("编译期直接扫描")]),s._v("：编译器在编译 Java 代码的时候扫描对应的注解并处理，比如某个方法使用 "),t("code",[s._v("@Override")]),s._v(" 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。")])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("运行期通过反射处理")]),s._v("：像框架中自带的注解(比如 Spring 框架的 "),t("code",[s._v("@Value")]),s._v("、"),t("code",[s._v("@Component")]),s._v(")都是通过反射来进行处理的。")]),s._v(" "),t("p",[s._v("定义一个注解 "),t("code",[s._v("MyAnnotation")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Retention")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RetentionPolicy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RUNTIME")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Target")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ElementType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TYPE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("在代码中使用注解，并通过反射机制获取注解信息：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@MyAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),s._v(" annotation "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("annotation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出 "hello"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("字节码注解解析")]),s._v("：在类加载期间，通过 ASM 或 Javassist 等字节码操作库来解析注解信息，并修改字节码文件。这种方式可以在不改变源代码的情况下，对代码进行动态的修改和增强。")]),s._v(" "),t("p",[s._v("定义一个注解 "),t("code",[s._v("MyAnnotation")]),s._v("：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Retention")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("RetentionPolicy")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("RUNTIME")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Target")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ElementType")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TYPE")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@interface")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("使用 ASM 操作库在类加载期间解析注解信息：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClassLoader")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassLoader")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("protected")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("findClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ClassNotFoundException")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" bytes "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClassData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("defineClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" bytes"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解析注解信息")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("byte")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClassData")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 读取类字节码文件")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClassLoader")]),s._v(" loader "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClassLoader")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Class")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" clazz "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" loader"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("loadClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"com.example.MyClass"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),s._v(" annotation "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" clazz"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyAnnotation")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("annotation"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("value")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出 "hello"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br")])])])]),s._v(" "),t("h2",{attrs:{id:"spi"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spi"}},[s._v("#")]),s._v(" SPI")]),s._v(" "),t("h3",{attrs:{id:"什么是-java-的-spi-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-java-的-spi-机制"}},[s._v("#")]),s._v(" 什么是 Java 的 SPI 机制？")]),s._v(" "),t("p",[s._v("Java 的 SPI（Service Provider Interface）机制是"),t("strong",[s._v("一种用于动态加载和扩展服务的机制")]),s._v("，它通过定义服务接口、服务提供者接口和加载配置文件的方式，实现了在"),t("strong",[s._v("运行时")]),s._v("动态加载服务提供者实现的功能。")]),s._v(" "),t("h3",{attrs:{id:"spi-机制的优缺点是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spi-机制的优缺点是什么"}},[s._v("#")]),s._v(" SPI 机制的优缺点是什么？")]),s._v(" "),t("p",[s._v("SPI 机制的")]),s._v(" "),t("ul",[t("li",[s._v("优点是可以在不修改代码的情况下，动态地扩展应用程序的功能，提高了程序的灵活性和可扩展性。")]),s._v(" "),t("li",[s._v("缺点是容易发生冲突和重复加载等问题，需要谨慎使用。")])]),s._v(" "),t("h3",{attrs:{id:"如何在-java-中使用-spi-机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在-java-中使用-spi-机制"}},[s._v("#")]),s._v(" 如何在 Java 中使用 SPI 机制？")]),s._v(" "),t("p",[s._v("在 Java 中使用 SPI 机制需要完成以下步骤：")]),s._v(" "),t("ul",[t("li",[s._v("定义服务接口和服务提供者接口；")]),s._v(" "),t("li",[s._v("编写服务提供者实现，并将实现类打成 jar 包；")]),s._v(" "),t("li",[s._v("在 META-INF/services 目录下创建一个名为服务接口全限定名的配置文件，文件内容为服务提供者接口的全限定类名；")]),s._v(" "),t("li",[s._v("在程序中加载服务提供者实现，可以通过 ClassLoader 和反射机制实现。")])]),s._v(" "),t("h3",{attrs:{id:"如何避免-spi-机制中的冲突问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何避免-spi-机制中的冲突问题"}},[s._v("#")]),s._v(" 如何避免 SPI 机制中的冲突问题？")]),s._v(" "),t("p",[s._v("为了避免 SPI 机制中的冲突问题，可以使用类加载器隔离机制，即创建多个类加载器，每个类加载器加载不同的 jar 包和配置文件，从而实现服务提供者实现的隔离。同时，也可以规范命名空间的使用，避免不同的服务提供者实现使用相同的命名空间。")]),s._v(" "),t("h3",{attrs:{id:"spi-机制和-spring-的-beanfactory-有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spi-机制和-spring-的-beanfactory-有什么区别"}},[s._v("#")]),s._v(" SPI 机制和 Spring 的 BeanFactory 有什么区别？")]),s._v(" "),t("p",[s._v("SPI 机制和 Spring 的 BeanFactory 都是用于实现插件化和扩展性的机制，但是它们的实现方式不同。SPI 机制是基于接口和配置文件的方式实现的，而 Spring 的 BeanFactory 是基于依赖注入和反射机制实现的。SPI 机制更加轻量级和灵活，适用于简单的应用场景，而 Spring 的 BeanFactory 更加强大和复杂，适用于大型的企业级应用。")]),s._v(" "),t("h2",{attrs:{id:"序列化和反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化和反序列化"}},[s._v("#")]),s._v(" 序列化和反序列化")]),s._v(" "),t("h3",{attrs:{id:"什么是序列化-什么是反序列化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是序列化-什么是反序列化"}},[s._v("#")]),s._v(" 什么是序列化？什么是反序列化？")]),s._v(" "),t("p",[s._v("如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。")]),s._v(" "),t("p",[s._v("简单来说：")]),s._v(" "),t("ul",[t("li",[t("strong",[s._v("序列化")]),s._v("： 将数据结构或对象转换成二进制字节流的过程")]),s._v(" "),t("li",[t("strong",[s._v("反序列化")]),s._v("：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程")])]),s._v(" "),t("p",[s._v("序列化的"),t("strong",[s._v("主要目的")]),s._v("是：")]),s._v(" "),t("p",[t("strong",[s._v("通过网络传输对象或者说是将对象存储到文件系统、数据库、内存中。")])]),s._v(" "),t("h3",{attrs:{id:"序列化协议对应于-tcp-ip-4-层模型的哪一层"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#序列化协议对应于-tcp-ip-4-层模型的哪一层"}},[s._v("#")]),s._v(" 序列化协议对应于 TCP/IP 4 层模型的哪一层？")]),s._v(" "),t("ul",[t("li",[s._v("OSI 模型中的"),t("strong",[s._v("表示层")])]),s._v(" "),t("li",[s._v("TCP/IP 4 层模型中的"),t("strong",[s._v("应用层")])])]),s._v(" "),t("h3",{attrs:{id:"项目中-json-数据的传输体现在哪"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#项目中-json-数据的传输体现在哪"}},[s._v("#")]),s._v(" 项目中，JSON 数据的传输体现在哪？")]),s._v(" "),t("p",[s._v("在项目中，JSON 数据的传输是非常常见的方式。JSON 是一种轻量级的数据交换格式，可以方便地在前后端之间传输数据。")]),s._v(" "),t("p",[s._v("以下是一些常见的在项目中使用 JSON 传输数据的场景：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("前后端 API 交互：在前后端分离的项目中，前端和后端通常通过 API 进行交互。在这种情况下，后端将数据以 JSON 格式返回给前端，前端可以使用 JavaScript 解析 JSON 数据，将其转换为对象，并在页面上渲染数据。")])]),s._v(" "),t("li",[t("p",[s._v("RESTful API：RESTful API 是一种基于 HTTP 协议的 API 设计风格，通常使用 JSON 作为数据传输格式。在 Java 项目中，可以使用 Spring MVC 或 JAX-RS 等框架来构建 RESTful API，并使用一些 JSON 解析库将 JSON 请求和响应转换为 Java 对象。")])]),s._v(" "),t("li",[t("p",[s._v("WebSocket 通信：在前后端分离的实时通信应用中，WebSocket 是一种常见的通信协议。在这种情况下，前后端可以使用 JSON 作为通信协议，将消息以 JSON 格式传输。")])]),s._v(" "),t("li",[t("p",[s._v("静态资源加载：在前后端分离的项目中，前端通常使用 "),t("code",[s._v("AJAX")]),s._v(" 或 "),t("code",[s._v("Fetch API")]),s._v(" 从后端获取数据。在这种情况下，后端可以将数据以 JSON 格式返回给前端，前端可以使用 JavaScript 解析 JSON 数据，并在页面上渲染数据。")])])]),s._v(" "),t("h2",{attrs:{id:"语法糖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#语法糖"}},[s._v("#")]),s._v(" 语法糖")]),s._v(" "),t("h3",{attrs:{id:"什么是语法糖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是语法糖"}},[s._v("#")]),s._v(" 什么是语法糖？")]),s._v(" "),t("p",[t("strong",[s._v("语法糖（Syntactic sugar）"),t("strong",[s._v("代指的是编程语言为了方便程序员开发程序而设计的一种")]),s._v("特殊语法")]),s._v("，这种语法对编程语言的功能并没有影响。")]),s._v(" "),t("p",[s._v("实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。")]),s._v(" "),t("blockquote",[t("p",[s._v("不过，JVM 其实并不能识别语法糖，Java 语法糖要想被正确执行，需要先通过编译器进行解糖，也就是在程序编译阶段将其转换成 JVM 认识的基本语法。这也侧面说明，"),t("strong",[s._v("Java 中真正支持语法糖的是 Java 编译器而不是 JVM")]),s._v("。如果你去看 "),t("code",[s._v("com.sun.tools.javac.main.JavaCompiler")]),s._v(" 的源码，你会发现在 "),t("code",[s._v("compile()")]),s._v(" 中有一个步骤就是调用 "),t("code",[s._v("desugar()")]),s._v("，这个方法就是负责解语法糖的实现的。")])]),s._v(" "),t("h3",{attrs:{id:"java-中有哪些常见的语法糖"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中有哪些常见的语法糖"}},[s._v("#")]),s._v(" Java 中有哪些常见的语法糖？")]),s._v(" "),t("p",[s._v("Java 中最常用的语法糖主要有"),t("strong",[s._v("泛型、自动拆装箱、变长参数、枚举、内部类、增强 for 循环、try-with-resources 语法、lambda 表达式")]),s._v("等。")]),s._v(" "),t("h3",{attrs:{id:"内部类了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内部类了解吗"}},[s._v("#")]),s._v(" 内部类了解吗？")]),s._v(" "),t("p",[s._v("内部类是指"),t("strong",[s._v("定义在类内部的类")]),s._v("，它可以访问外部类的私有变量和方法，从而实现对外部类的访问和控制。")]),s._v(" "),t("p",[s._v("内部类主要分为以下几种：")]),s._v(" "),t("ol",[t("li",[s._v("**成员内部类：**定义在类中的普通内部类，"),t("strong",[s._v("可以访问")]),s._v("外部类的私有变量和方法；（类中类）")]),s._v(" "),t("li",[s._v("**静态内部类：**定义在类中的静态内部类，"),t("strong",[s._v("不能访问")]),s._v("外部类的非静态变量和方法；（静态的类中类）")]),s._v(" "),t("li",[t("strong",[s._v("局部内部类："),t("strong",[s._v("定义在")]),s._v("方法内的内部类")]),s._v("，只能在方法内部使用。（方法中的类）")])]),s._v(" "),t("h3",{attrs:{id:"匿名内部类了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#匿名内部类了解吗"}},[s._v("#")]),s._v(" 匿名内部类了解吗？")]),s._v(" "),t("p",[s._v("匿名内部类是指"),t("strong",[s._v("没有名字的内部类")]),s._v("，它是一种简化的内部类语法，可以用来创建"),t("strong",[s._v("一个临时的、只使用一次的")]),s._v("类。")]),s._v(" "),t("p",[s._v("匿名内部类"),t("strong",[s._v("通常用于实现接口或抽象类")]),s._v("（花括号中的内容是匿名内部类的具体实现），匿名内部类"),t("strong",[s._v("可以使得代码更加简洁，但也会使得代码的可读性和可维护性降低，因此需要谨慎使用。")])]),s._v(" "),t("p",[s._v("例如，下面的代码演示了如何使用匿名内部类实现一个 "),t("code",[s._v("Runnable")]),s._v(" 接口：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" t "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程执行的代码")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])])])}),[],!1,null,null,null);a.default=v.exports}}]);