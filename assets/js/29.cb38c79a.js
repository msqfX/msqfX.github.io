(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{356:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"线程池详解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池详解"}},[s._v("#")]),s._v(" 线程池详解")]),s._v(" "),a("h2",{attrs:{id:"首先回顾一下单个线程的创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#首先回顾一下单个线程的创建方式"}},[s._v("#")]),s._v(" 首先回顾一下单个线程的创建方式")]),s._v(" "),a("h3",{attrs:{id:"_1、继承-thread-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、继承-thread-类"}},[s._v("#")]),s._v(" 1、继承 Thread 类")]),s._v(" "),a("p",[s._v("这是一种比较传统的创建线程的方式。你可以创建一个类，继承自 Thread 类，并重写 run 方法来定义线程的执行逻辑。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyThread")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程的执行逻辑")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建并启动线程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyThread")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"_2、实现-runnable-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、实现-runnable-接口"}},[s._v("#")]),s._v(" 2、实现 Runnable 接口")]),s._v(" "),a("p",[s._v("这种方式更常用，它避免了 Java 的单继承限制，你可以实现 Runnable 接口，然后将其实例作为参数传递给 Thread 构造函数。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyRunnable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程的执行逻辑")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建并启动线程")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyRunnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("h3",{attrs:{id:"_3、使用匿名内部类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、使用匿名内部类"}},[s._v("#")]),s._v(" 3、使用匿名内部类")]),s._v(" "),a("p",[s._v("你可以在创建线程时使用匿名内部类，实现 Runnable 接口的 run 方法。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程的执行逻辑")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"_4、使用-java-8-的-lambda-表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、使用-java-8-的-lambda-表达式"}},[s._v("#")]),s._v(" 4、使用 Java 8 的 Lambda 表达式")]),s._v(" "),a("p",[s._v("如果 Runnable 接口只有一个抽象方法，你可以使用 Lambda 表达式简化代码。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),s._v(" thread "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程的执行逻辑")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nthread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("start")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"_5、实现-callable-接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、实现-callable-接口"}},[s._v("#")]),s._v(" 5、实现 Callable 接口")]),s._v(" "),a("p",[s._v("Callable 接口允许线程返回结果或抛出异常。需要通过 ExecutorService 来执行。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyCallable")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("implements")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("throws")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Exception")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 线程的执行逻辑")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello from Callable"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executor "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyCallable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" future"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 获取线程执行结果")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("h3",{attrs:{id:"实现-runnable-接口和-callable-接口的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-runnable-接口和-callable-接口的区别"}},[s._v("#")]),s._v(" 实现 Runnable 接口和 Callable 接口的区别？")]),s._v(" "),a("p",[s._v("Java 中的 Runnable 接口和 Callable 接口都是用来创建多线程的接口，它们的区别如下：")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("方法名不同")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("Runnable 接口"),a("strong",[s._v("只有一个 "),a("code",[s._v("run()")]),s._v(" 方法")]),s._v("，")]),s._v(" "),a("li",[s._v("而 Callable 接口"),a("strong",[s._v("只有一个 "),a("code",[s._v("call()")]),s._v(" 方法")]),s._v("。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("返回值不同")]),s._v("。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("Runnable 的 "),a("code",[s._v("run()")]),s._v(" 方法"),a("strong",[s._v("没有返回值")]),s._v("，")])]),s._v(" "),a("li",[a("p",[s._v("而 Callable 的 "),a("code",[s._v("call()")]),s._v(" 方法"),a("strong",[s._v("可以返回执行结果")]),s._v("。")])])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("异常处理不同")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("Runnable 的 "),a("code",[s._v("run()")]),s._v(" 方法"),a("strong",[s._v("不能抛出异常")]),s._v("，")]),s._v(" "),a("li",[s._v("而 Callable 的 "),a("code",[s._v("call()")]),s._v(" 方法"),a("strong",[s._v("可以抛出异常")]),s._v("，并且需要在调用 "),a("code",[s._v("Future.get()")]),s._v(" 方法时进行异常处理。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("调用方式不同")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("Runnable 接口"),a("strong",[s._v("可以通过 Thread 类的构造方法来创建一个新的线程并启动它")]),s._v("，")]),s._v(" "),a("li",[s._v("而 Callable 接口则"),a("strong",[s._v("需要借助 Executor 框架来执行")]),s._v("。")])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("用途不同")]),s._v("。")]),s._v(" "),a("ul",[a("li",[s._v("Runnable 接口"),a("strong",[s._v("通常用于需要执行一些简单的任务的场景")]),s._v("，")]),s._v(" "),a("li",[s._v("Callable 接口"),a("strong",[s._v("通常用于需要返回结果、或者需要抛出异常、或者需要在执行任务前进行一些初始化操作的场景")]),s._v("。")])])])]),s._v(" "),a("h2",{attrs:{id:"什么是线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是线程池"}},[s._v("#")]),s._v(" 什么是线程池？")]),s._v(" "),a("p",[s._v("线程池就是管理一系列线程的资源池。")]),s._v(" "),a("p",[s._v("当有任务要处理时，直接从线程池中获取线程来处理，处理完之后线程并不会立即被销毁，而是等待下一个任务。")]),s._v(" "),a("h2",{attrs:{id:"为什么要用线程池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要用线程池"}},[s._v("#")]),s._v(" 为什么要用线程池？")]),s._v(" "),a("p",[s._v("简单来说，是因为使用线程池可以"),a("strong",[s._v("提高资源的利用率")]),s._v("。")]),s._v(" "),a("blockquote",[a("p",[s._v("线程池可以帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。")]),s._v(" "),a("p",[s._v("我们写代码的过程中，"),a("strong",[s._v("学会池化思想")]),s._v("，最直接相关的就是使用线程池而不是去"),a("code",[s._v("new")]),s._v("一个线程。")])]),s._v(" "),a("p",[s._v("使用线程池有三大好处：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("提高响应速度")]),s._v("。通过线程池创建一系列线程，使用时直接通过线程池获取，不再需要手动创建线程，响应速度自然就大大提高了。")]),s._v(" "),a("li",[a("strong",[s._v("降低资源消耗")]),s._v("。由于线程池被池化管理了，我们无需为了某些功能去手动创建和销毁线程，资源消耗自然降低。")]),s._v(" "),a("li",[a("strong",[s._v("提高线程的可管理性")]),s._v("。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。")])]),s._v(" "),a("h2",{attrs:{id:"讲讲线程池的工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲线程池的工作流程"}},[s._v("#")]),s._v(" 讲讲线程池的工作流程")]),s._v(" "),a("ol",[a("li",[s._v("线程池刚"),a("strong",[s._v("创建")]),s._v("时，里面没有一个线程。任务队列是作为参数传进来的。不过，就算队列里面有任务，线程池也不会马上执行它们。")]),s._v(" "),a("li",[s._v("当调用 "),a("code",[s._v("execute()")]),s._v(" 方法"),a("strong",[s._v("添加一个任务")]),s._v("时，线程池会做如下判断：\n"),a("ul",[a("li",[s._v("如果正在运行的线程数量小于 corePoolSize，那么马上创建线程运行这个任务；")]),s._v(" "),a("li",[s._v("如果正在运行的线程数量大于或等于 corePoolSize，那么将这个任务放入队列；")]),s._v(" "),a("li",[s._v("如果这时候队列满了，而且正在运行的线程数量小于 maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；")]),s._v(" "),a("li",[s._v("如果队列满了，而且正在运行的线程数量大于或等于 maximumPoolSize，那么线程池会根据拒绝策略来对应处理。")])])]),s._v(" "),a("li",[s._v("当一个线程"),a("strong",[s._v("完成")]),s._v("任务时，它会从队列中取"),a("strong",[s._v("下一个")]),s._v("任务来执行。")]),s._v(" "),a("li",[s._v("当一个线程无事可做，超过一定的时间（keepAliveTime）时，线程池会判断，如果当前运行的线程数大于 corePoolSize，那么这个线程就被停掉。所以线程池的所有任务完成后，它最终会"),a("strong",[s._v("收缩")]),s._v("到 corePoolSize 的大小。")])]),s._v(" "),a("p",[s._v("图解：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://cmty256.github.io/imgs-blog/Java/image.6282d56i3hg0.webp",alt:"image"}})]),s._v(" "),a("h2",{attrs:{id:"线程池使用入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池使用入门"}},[s._v("#")]),s._v(" 线程池使用入门")]),s._v(" "),a("ol",[a("li",[s._v("首先创建一个含有 3 个线程的线程，")]),s._v(" "),a("li",[s._v("然后提交 3 个任务到线程池中，让线程池中的线程池执行，")]),s._v(" "),a("li",[s._v("完成后通过 shutdown 停止线程池，线程池收到通知后会将手头的任务都执行完，再将线程池停止。")])]),s._v(" "),a("p",[s._v("这里使用 isTerminated 判断线程池是否完全停止了。只有状态为 terminated 才能说明线程池关闭了，结束循环，退出方法。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Test")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("contextLoads")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//创建含有3个线程的线程池")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" threadPool "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//提交3个任务到线程池中")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("final")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" taskNo "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            threadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                logger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"执行任务{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" taskNo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//关闭线程池")]),s._v("\n        threadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//如果线程池还没达到Terminated状态，说明线程池中还有任务没有执行完，则继续循环等待线程池执行完任务")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),s._v("threadPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isTerminated")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("输出结果")]),s._v(" "),a("div",{staticClass:"language-bash line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2023")]),s._v("-03-21 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(":01:16.198  INFO "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40176")]),s._v(" --- "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pool-4-thread-1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" .j.JavaCommonMistakes100ApplicationTests "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 执行任务0\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2023")]),s._v("-03-21 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(":01:16.198  INFO "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40176")]),s._v(" --- "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pool-4-thread-2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" .j.JavaCommonMistakes100ApplicationTests "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 执行任务1\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2023")]),s._v("-03-21 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("23")]),s._v(":01:16.225  INFO "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("40176")]),s._v(" --- "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("pool-4-thread-3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" .j.JavaCommonMistakes100ApplicationTests "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(":")]),s._v(" 执行任务2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"executor-框架介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executor-框架介绍"}},[s._v("#")]),s._v(" Executor 框架介绍")]),s._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("在 Java 5 之后，通过 "),a("code",[s._v("Executor")]),s._v(" 来启动线程比使用 "),a("code",[s._v("Thread")]),s._v(" 的 "),a("code",[s._v("start")]),s._v(" 方法更好，除了更易管理，效率更好（用线程池实现，节约开销）外，还有关键的一点：有助于避免 this 逃逸问题。")]),s._v(" "),a("p",[s._v("这是因为线程池的执行过程会"),a("strong",[s._v("等待构造完成后再进行任务的执行")]),s._v("，从而避免了 this 逃逸问题的发生。")]),s._v(" "),a("p",[a("em",[s._v("什么是 this 逃逸问题？")])]),s._v(" "),a("p",[s._v("在 Java 中，对象的构造过程可能会涉及到多个线程，而当一个对象尚未完全构造完成但已经被其他线程引用时，就可能产生 this 逃逸问题。")]),s._v(" "),a("p",[s._v("具体来说，当一个对象正在构造过程中，它的引用就被发布到了其他线程，这时其他线程可能会使用这个尚未完全构造的对象，从而导致意料之外的行为和错误。这可能会因为对象的状态不稳定而引发线程安全问题。")]),s._v(" "),a("h3",{attrs:{id:"结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[s._v("#")]),s._v(" 结构")]),s._v(" "),a("p",[a("code",[s._v("Executor")]),s._v(" 框架结构主要由三大部分组成：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("任务")]),s._v("。包括被执行任务需要实现的接口：Runnable 接口或 Callable 接口。")]),s._v(" "),a("li",[a("strong",[s._v("任务的执行")]),s._v("。包括任务执行机制的核心接口 Executor，以及继承自 Executor 的 ExecutorService 接口。Executor 框架有两个关键类实现了 ExecutorService 接口（ThreadPoolExecutor 和 ScheduleThreadPoolExecutor）。")]),s._v(" "),a("li",[a("strong",[s._v("异步计算的结果")]),s._v("。包括接口 Future 和实现 Future 接口的 FutureTask 类。")])]),s._v(" "),a("h3",{attrs:{id:"使用流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用流程"}},[s._v("#")]),s._v(" 使用流程")]),s._v(" "),a("ol",[a("li",[s._v("主线程首先要创建实现 "),a("code",[s._v("Runnable")]),s._v(" 或者 "),a("code",[s._v("Callable")]),s._v(" 接口的任务对象。")]),s._v(" "),a("li",[s._v("把创建完成的实现 "),a("code",[s._v("Runnable")]),s._v("/"),a("code",[s._v("Callable")]),s._v(" 接口的【对象】直接交给 "),a("code",[s._v("ExecutorService")]),s._v(" 执行: "),a("code",[s._v("ExecutorService.execute（Runnable command）")]),s._v("或者也可以把 "),a("code",[s._v("Runnable")]),s._v(" 对象或"),a("code",[s._v("Callable")]),s._v(" 对象提交给 "),a("code",[s._v("ExecutorService")]),s._v(" 执行（"),a("code",[s._v("ExecutorService.submit（Runnable task）")]),s._v("或 "),a("code",[s._v("ExecutorService.submit（Callable <T> task）")]),s._v("）。")]),s._v(" "),a("li",[s._v("如果执行 "),a("code",[s._v("ExecutorService.submit（…）")]),s._v("，"),a("code",[s._v("ExecutorService")]),s._v(" 将返回一个实现"),a("code",[s._v("Future")]),s._v("接口的对象（我们刚刚也提到过了执行 "),a("code",[s._v("execute()")]),s._v("方法和 "),a("code",[s._v("submit()")]),s._v("方法的区别，"),a("code",[s._v("submit()")]),s._v("会返回一个 "),a("code",[s._v("FutureTask 对象）。由于 FutureTask")]),s._v(" 实现了 "),a("code",[s._v("Runnable")]),s._v("，我们也可以创建 "),a("code",[s._v("FutureTask")]),s._v("，然后直接交给 "),a("code",[s._v("ExecutorService")]),s._v(" 执行。")]),s._v(" "),a("li",[s._v("最后，主线程可以执行 "),a("code",[s._v("FutureTask.get()")]),s._v("方法来等待任务执行完成。主线程也可以执行 "),a("code",[s._v("FutureTask.cancel（boolean mayInterruptIfRunning）")]),s._v("来取消此任务的执行。")])]),s._v(" "),a("p",[s._v("代码示例：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token import"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("util"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("concurrent"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExample")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个线程池")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" executorService "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Executors")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建实现Runnable接口的任务")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),s._v(" task1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Task 1 is running on thread: "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建实现Callable接口的任务")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Callable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" task2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Task 2 is running on thread: "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Thread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("currentThread")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Task 2 Result"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 执行Runnable任务")]),s._v("\n            executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 提交Callable任务，并获取Future对象")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("task2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 主线程等待Callable任务执行完成，并获取结果")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" future"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Task 2 Result: "')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutionException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("printStackTrace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 关闭线程池")]),s._v("\n            executorService"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("shutdown")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br")])]),a("h2",{attrs:{id:"线程池原理解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池原理解析"}},[s._v("#")]),s._v(" 线程池原理解析")]),s._v(" "),a("h3",{attrs:{id:"线程池有哪些参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池有哪些参数"}},[s._v("#")]),s._v(" 线程池有哪些参数？")]),s._v(" "),a("p",[s._v("通过 "),a("code",[s._v("Executors")]),s._v(" 框架创建的线程池，从源码可以看到，它底层是通过 "),a("code",[s._v("ThreadPoolExecutor")]),s._v(" 完成线程池的创建，具体参数如下：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutorService")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("newFixedThreadPool")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ThreadPoolExecutor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" nThreads"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                      "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0L")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TimeUnit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("MILLISECONDS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                                      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LinkedBlockingQueue")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ol",[a("li",[a("p",[s._v("corePoolSize：线程池的"),a("strong",[s._v("核心线程数")]),s._v("，即线程池中始终保持的线程数。")])]),s._v(" "),a("li",[a("p",[s._v("maximumPoolSize：线程池中"),a("strong",[s._v("最大的线程数")]),s._v("，包括核心线程数和非核心线程数。")])]),s._v(" "),a("li",[a("p",[s._v("keepAliveTime："),a("strong",[s._v("非核心线程的闲置时间")]),s._v("，超过该时间后将被回收。")])]),s._v(" "),a("li",[a("p",[s._v("unit：keepAliveTime 非核心线程的闲置"),a("strong",[s._v("时间的单位")]),s._v("。")])]),s._v(" "),a("li",[a("p",[s._v("workQueue："),a("strong",[s._v("任务队列")]),s._v("，用于存储还未被执行的任务。")])]),s._v(" "),a("li",[a("p",[s._v("threadFactory："),a("strong",[s._v("线程工厂")]),s._v("，用于创建线程。")])]),s._v(" "),a("li",[a("p",[s._v("handler："),a("strong",[s._v("饱和策略")]),s._v("，即当线程池中的线程都在执行任务时，新的任务会如何处理。（"),a("strong",[s._v("也称为拒绝策略")]),s._v("）")])])]),s._v(" "),a("h3",{attrs:{id:"讲讲核心线程数和最大线程数的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲核心线程数和最大线程数的区别"}},[s._v("#")]),s._v(" 讲讲核心线程数和最大线程数的区别？")]),s._v(" "),a("p",[s._v("核心线程数和最大线程数的区别在于：")]),s._v(" "),a("p",[s._v("在任务数超过核心线程数时，线程池会优先创建核心线程来执行任务，只有"),a("strong",[s._v("当任务队列已满")]),s._v("且核心线程都在执行任务时，才会创建非核心线程来执行任务，直到达到最大线程数为止。")]),s._v(" "),a("h3",{attrs:{id:"讲讲有哪些拒绝策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲讲有哪些拒绝策略"}},[s._v("#")]),s._v(" 讲讲有哪些拒绝策略？")]),s._v(" "),a("p",[s._v("有四种常见的拒绝策略：")]),s._v(" "),a("ol",[a("li",[s._v("AbortPolicy（默认）：直接抛出异常，阻止系统正常运行。")]),s._v(" "),a("li",[s._v("CallerRunsPolicy：只用调用者所在线程来执行任务。")]),s._v(" "),a("li",[s._v("DiscardOldestPolicy：丢弃队列中最老的一个任务，尝试再次提交当前任务。")]),s._v(" "),a("li",[s._v("DiscardPolicy：直接丢弃任务，不做任何处理。")])]),s._v(" "),a("h3",{attrs:{id:"阻塞队列有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻塞队列有哪些"}},[s._v("#")]),s._v(" 阻塞队列有哪些？")]),s._v(" "),a("p",[s._v("Java 中常用的阻塞队列有以下 4 种：")]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("ArrayBlockingQueue")]),s._v("：一个由"),a("strong",[s._v("数组结构组成的有界阻塞队列")]),s._v("，按照先进先出的原则对元素进行排序。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("LinkedBlockingQueue")]),s._v("：一个由"),a("strong",[s._v("链表结构组成的可选有界阻塞队列")]),s._v("，按照先进先出的原则对元素进行排序。")]),s._v(" "),a("p",[s._v("如果队列容量没有限制，则为"),a("strong",[s._v("无界阻塞队列")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("PriorityBlockingQueue")]),s._v("：一个支持"),a("strong",[s._v("优先级排序的无界阻塞队列")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("SynchronousQueue")]),s._v("：一个"),a("strong",[s._v("不存储元素的阻塞队列")]),s._v("，每个插入操作必须等待另一个线程的移除操作，否则插入操作一直处于阻塞状态。")])])]),s._v(" "),a("h3",{attrs:{id:"新线程添加的流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新线程添加的流程"}},[s._v("#")]),s._v(" 新线程添加的流程?")]),s._v(" "),a("p",[s._v("新线程的添加有以下 4 个流程：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("如果当前线程池中的线程数"),a("strong",[s._v("小于核心线程数")]),s._v("，那么就创建一个新的核心线程来执行这个任务；")])]),s._v(" "),a("li",[a("p",[s._v("如果当前线程池中的线程数已经"),a("strong",[s._v("达到了核心线程数")]),s._v("，那么就将任务添加到任务队列中等待执行；")])]),s._v(" "),a("li",[a("p",[s._v("如果"),a("strong",[s._v("任务队列已满")]),s._v("，但当前线程池中的线程数"),a("strong",[s._v("还没有达到最大线程数")]),s._v("，那么就创建一个新的非核心线程来执行这个任务；")]),s._v(" "),a("blockquote",[a("p",[s._v("非核心线程在执行完任务之后会被回收，直到线程池中的线程数又重新降至核心线程数。")])])]),s._v(" "),a("li",[a("p",[s._v("如果当前线程池中的线程数已经"),a("strong",[s._v("达到了最大线程数，那么就根据饱和策略来处理这个任务")]),s._v("。")])])]),s._v(" "),a("h3",{attrs:{id:"线程池的两种创建方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池的两种创建方式"}},[s._v("#")]),s._v(" 线程池的两种创建方式")]),s._v(" "),a("h4",{attrs:{id:"threadpoolexecutor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor"}},[s._v("#")]),s._v(" ThreadPoolExecutor")]),s._v(" "),a("p",[a("em",[s._v("方式一")]),s._v("：通过 "),a("code",[s._v("ThreadPoolExecutor")]),s._v(" 构造函数来创建（"),a("strong",[s._v("推荐")]),s._v("）。")]),s._v(" "),a("p",[s._v("我们可以创建多种类型的 "),a("code",[s._v("ThreadPoolExecutor")]),s._v("：")]),s._v(" "),a("ul",[a("li",[a("strong",[a("code",[s._v("FixedThreadPool")])]),s._v("：该方法返回一个固定线程数量的线程池。该线程池中的线程数量始终不变。当有一个新的任务提交时，线程池中若有空闲线程，则立即执行。若没有，则新的任务会被暂存在一个任务队列中，待有线程空闲时，便处理在任务队列中的任务。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("SingleThreadExecutor")])]),s._v("：该方法返回一个只有一个线程的线程池。若多余一个任务被提交到该线程池，任务会被保存在一个任务队列中，待线程空闲，按先入先出的顺序执行队列中的任务。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("CachedThreadPool")])]),s._v("： 该方法返回一个可根据实际情况调整线程数量的线程池。线程池的线程数量不确定，但若有空闲线程可以复用，则会优先使用可复用的线程。若所有线程均在工作，又有新的任务提交，则会创建新的线程处理任务。所有线程在当前任务执行完毕后，将返回线程池进行复用。")]),s._v(" "),a("li",[a("strong",[a("code",[s._v("ScheduledThreadPool")])]),s._v("：该返回一个用来在给定的延迟后运行任务或者定期执行任务的线程池。")])]),s._v(" "),a("h4",{attrs:{id:"executors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#executors"}},[s._v("#")]),s._v(" Executors")]),s._v(" "),a("p",[a("em",[s._v("方式二")]),s._v("：通过 "),a("code",[s._v("Executor")]),s._v(" 框架的工具类 "),a("code",[s._v("Executors")]),s._v(" 来创建。")]),s._v(" "),a("p",[a("code",[s._v("Executors")]),s._v(" 返回线程池对象的弊端如下：")]),s._v(" "),a("ul",[a("li",[a("p",[a("strong",[s._v("FixedThreadPool 和 SingleThreadExecutor")]),s._v("：使用的是无界的 "),a("code",[s._v("LinkedBlockingQueue")]),s._v("，任务队列最大长度为 "),a("code",[s._v("Integer.MAX_VALUE")]),s._v(",可能堆积大量的请求，从而导致 OOM。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("CachedThreadPool")]),s._v("：使用的是同步队列 "),a("code",[s._v("SynchronousQueue")]),s._v(", 允许创建的线程数量为 "),a("code",[s._v("Integer.MAX_VALUE")]),s._v(" ，可能会创建大量线程，从而导致 OOM。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("ScheduledThreadPool 和 SingleThreadScheduledExecutor")]),s._v(" : 使用的无界的延迟阻塞队列 "),a("code",[s._v("DelayedWorkQueue")]),s._v("，任务队列最大长度为 "),a("code",[s._v("Integer.MAX_VALUE")]),s._v(", 可能堆积大量的请求，从而导致 OOM。")]),s._v(" "),a("blockquote",[a("p",[s._v("OOM（Out of Memory）是指内存溢出，即程序在运行过程中申请的内存超过了JVM所能提供的最大内存限制，导致无法继续分配内存，从而抛出内存溢出异常。")])])])]),s._v(" "),a("h3",{attrs:{id:"线程池提交-execute-和-submit-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池提交-execute-和-submit-有什么区别"}},[s._v("#")]),s._v(" 线程池提交 execute 和 submit 有什么区别？")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("execute")]),s._v(" 用于提交不需要返回值的任务")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("threadsPool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("execute")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Runnable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// TODO Auto-generated method stub } ")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[a("code",[s._v("submit()")]),s._v(" 方法用于提交需要返回值的任务")]),s._v(" "),a("p",[s._v("线程池会返回一个 future 类型的对象，通过这个 future 对象可以判断任务是否执行成功，并且可以通过 future 的 "),a("code",[s._v("get()")]),s._v(" 方法来获取返回值。")])])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Future")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" future "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" executor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("submit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("harReturnValuetask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" future"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("InterruptedException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理中断异常 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ExecutionException")]),s._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 处理无法执行任务异常 ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 关闭线程池 executor.shutdown();")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h3",{attrs:{id:"线程池的关闭方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程池的关闭方式"}},[s._v("#")]),s._v(" 线程池的关闭方式")]),s._v(" "),a("p",[s._v("线程池的停止方式有两种:")]),s._v(" "),a("ol",[a("li",[s._v("shutdown: 使用这个方法之后，我们无法提交新的任务进来，线程池会继续工作，将手头的任务"),a("strong",[s._v("执行完再停止")]),s._v("。")]),s._v(" "),a("li",[s._v("shutdownNow: 这种停止方式比较粗暴，线程池会直接将手头的任务都强行停止，且不接受新任务进来，线程"),a("strong",[s._v("停止立即生效")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"学习参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#学习参考"}},[s._v("#")]),s._v(" 学习参考")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://javaguide.cn/java/concurrent/java-thread-pool-summary.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java 线程池详解 | JavaGuide)"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.sharkchili.com/pages/4feb33/#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E7%BA%BF%E7%A8%8B%E6%B1%A0",target:"_blank",rel:"noopener noreferrer"}},[s._v("Java线程池详解 | Shark Chili"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://tobebetterjavaer.com/sidebar/sanfene/javathread.html#%E7%BA%BF%E7%A8%8B%E6%B1%A0",target:"_blank",rel:"noopener noreferrer"}},[s._v("面渣逆袭-Java并发编程"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://blog.csdn.net/wozaibohaibian/article/details/125591474",target:"_blank",rel:"noopener noreferrer"}},[s._v("Executor框架详解"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==&mid=2247502660&idx=1&sn=17166646f82412cd81955930f799ab4e&chksm=cf22146df8559d7bcf9becd82e1d8006c35a781e5dbd0a79e0a9e121803ee40d6eae7ebd7ccb&token=1804795294&lang=zh_CN&poc_token=HKuO-mSjeqmx7sPU3E-0NEeYF7KuysdAnBb3lCZ4",target:"_blank",rel:"noopener noreferrer"}},[s._v("实战总结！18种接口优化方案的总结"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);