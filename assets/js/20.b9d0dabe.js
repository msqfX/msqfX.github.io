(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{347:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"java-基本数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-基本数据类型"}},[s._v("#")]),s._v(" Java 基本数据类型")]),s._v(" "),t("h2",{attrs:{id:"java-中的几种基本数据类型是什么-对应的包装类型是什么-各自占用多少字节"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#java-中的几种基本数据类型是什么-对应的包装类型是什么-各自占用多少字节"}},[s._v("#")]),s._v(" Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节？")]),s._v(" "),t("p",[t("strong",[s._v("8 种基本数据类型")]),s._v("：byte 1，short 2，int 4，long 8，float 4，dobule 8，char 2，boolean 1")]),s._v(" "),t("p",[t("strong",[s._v("对应的包装类型")]),s._v("：Byte，Short，Interger，Long，Float，Double，Character，Boolean")]),s._v(" "),t("p",[t("strong",[s._v("对应占用的字节")]),s._v("：1，2，4，8，4，8，2，1")]),s._v(" "),t("blockquote",[t("p",[s._v("注意：short 是 2 字节")])]),s._v(" "),t("h2",{attrs:{id:"讲讲-int-的取值范围是多少"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#讲讲-int-的取值范围是多少"}},[s._v("#")]),s._v(" 讲讲 int 的取值范围是多少？")]),s._v(" "),t("p",[s._v("想想"),t("strong",[s._v("字节")]),s._v("和"),t("strong",[s._v("取值范围")]),s._v("的关系。")]),s._v(" "),t("ul",[t("li",[s._v("int 有 4 个字节，也就是占 32 个比特位，")]),s._v(" "),t("li",[s._v("所以取值范围就是【"),t("strong",[s._v("-2 的 31 次方到 2 的 31 次方减 1")]),s._v("】，即约为 -2,147,483,648 到 2,147,483,647。")])]),s._v(" "),t("blockquote",[t("p",[s._v("需要注意的是，这个范围是针对有符号的整数类型。")]),s._v(" "),t("p",[s._v("如果使用【无符号】的整数类型（如 Java 中的 unsigned int），则范围将从 0 到 2^32 - 1，即约为 0 到 4,294,967,295。")])]),s._v(" "),t("h2",{attrs:{id:"基本类型和包装类型的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基本类型和包装类型的区别"}},[s._v("#")]),s._v(" 基本类型和包装类型的区别？")]),s._v(" "),t("p",[s._v("五大区别：")]),s._v(" "),t("p",[t("strong",[s._v("用途")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("基本类型一般用来定义一些常量和局部变量，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。")]),s._v(" "),t("li",[s._v("包装类型可用于泛型，而基本类型不可以。")])]),s._v(" "),t("p",[t("strong",[s._v("存储方式")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("基本数据类型的【局部变量】存放在 Java 虚拟机"),t("strong",[s._v("栈")]),s._v("中的局部变量表中，基本数据类型的【成员变量】（未被 "),t("code",[s._v("static")]),s._v(" 修饰 ）存放在 Java 虚拟机的堆中。")]),s._v(" "),t("li",[s._v("包装类型属于对象类型，几乎所有对象实例都存在于堆中。")])]),s._v(" "),t("p",[t("strong",[s._v("占用空间")]),s._v("：")]),s._v(" "),t("p",[s._v("相比于包装类型（对象类型），基本数据类型占用的空间往往非常小。")]),s._v(" "),t("p",[t("strong",[s._v("默认值")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("成员变量包装类型的默认值是 "),t("code",[s._v("null")]),s._v("，")])]),s._v(" "),t("li",[t("p",[s._v("基本类型有默认值，但不固定。")]),s._v(" "),t("blockquote",[t("ul",[t("li",[s._v("byte：0")]),s._v(" "),t("li",[s._v("short：0")]),s._v(" "),t("li",[s._v("int：0")]),s._v(" "),t("li",[s._v("long：0L")]),s._v(" "),t("li",[s._v("float：0.0f")]),s._v(" "),t("li",[s._v("double：0.0d")]),s._v(" "),t("li",[s._v("char：'\\u0000'")]),s._v(" "),t("li",[s._v("boolean：false")])])])])]),s._v(" "),t("p",[t("strong",[s._v("比较方式")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("对于基本数据类型来说，"),t("code",[s._v("==")]),s._v(" 比较的是值。")]),s._v(" "),t("li",[s._v("对于包装数据类型来说，"),t("code",[s._v("==")]),s._v(" 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 "),t("code",[s._v("equals()")]),s._v(" 方法。")])]),s._v(" "),t("h2",{attrs:{id:"包装类型的缓存机制了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包装类型的缓存机制了解吗"}},[s._v("#")]),s._v(" 包装类型的缓存机制了解吗？")]),s._v(" "),t("p",[s._v("另一种说法是：包装类型的常量池技术。")]),s._v(" "),t("p",[t("code",[s._v("Java")]),s._v(" 基本数据类型的包装类型大部分都用到了缓存机制来提升性能（除了浮点型）。"),t("strong",[s._v("即会默认创建相应类型的缓存数据")]),s._v("。")]),s._v(" "),t("p",[s._v("例如："),t("code",[s._v("Byte")]),s._v(","),t("code",[s._v("Short")]),s._v(","),t("code",[s._v("Interger")]),s._v(","),t("code",[s._v("Long")]),s._v(" 这 4 种包装类默认创建了数值 [-128,127] 的相应类型的缓存数据，"),t("code",[s._v("Character")]),s._v(" 创建了数值在 [0,127] 范围的缓存数据，"),t("code",[s._v("Boolean")]),s._v(" 直接返回 "),t("code",[s._v("True")]),s._v(" or "),t("code",[s._v("False")]),s._v("。")]),s._v(" "),t("p",[s._v("当使用自动装箱的方式将一个基本数据类型的值转换为包装类型时，"),t("strong",[s._v("如果这个值在缓存范围内，那么就直接返回缓存中的对象，否则就创建一个新的对象")]),s._v("。")]),s._v(" "),t("blockquote",[t("p",[s._v("由于包装类型的值是存储在堆内存中的，因此在进行大量的数值计算时，使用包装类型会比直接使用基本数据类型更加耗时和占用内存。为了提高程序的性能和效率，Java 提供了包装类型的缓存机制。")])]),s._v(" "),t("h2",{attrs:{id:"为什么要有包装类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有包装类型"}},[s._v("#")]),s._v(" 为什么要有包装类型？")]),s._v(" "),t("p",[s._v("在 Java 中，包装类型是将基本数据类型（如 int、double 等）"),t("strong",[s._v("封装成对象的一种机制")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("Java 中引入包装类型的主要原因是为了提供一些额外的功能和灵活性")]),s._v("，这些功能在基本数据类型上不可用。")]),s._v(" "),t("p",[s._v("以下是一些包装类型的常见用途：")]),s._v(" "),t("ol",[t("li",[s._v("包装类型可以使基本数据类型具有对象特性。例如，可以将包装类型存储在集合中（如 List、Map 等），而基本数据类型不能。")]),s._v(" "),t("li",[s._v("包装类型具有面向对象的行为。例如，可以使用 "),t("code",[s._v("toString()")]),s._v(" 方法将包装类型转换为字符串，而基本数据类型不能。")]),s._v(" "),t("li",[t("strong",[s._v("包装类型可以为 null")]),s._v("。例如，如果尝试将基本数据类型赋值为 null，则会引发空指针异常。但是，将包装类型赋值为 null 是可以的。（一般声明变量时用引用类型，而参数类型用基本数据类型）")]),s._v(" "),t("li",[s._v("包装类型支持自动装箱和拆箱。自动装箱是指将基本数据类型自动转换为相应的包装类型，而自动拆箱是指将包装类型自动转换为相应的基本数据类型。这使得代码更加简洁和易于编写。")])]),s._v(" "),t("p",[s._v("总之，包装类型可以使 Java 代码更加灵活和易于维护。"),t("strong",[s._v("它们可以使基本数据类型具有对象特性，并提供了许多基本数据类型上不可用的功能。"),t("strong",[s._v("此外，Java 中的包装类型还可以")]),s._v("用于处理空值和进行类型转换")]),s._v("，这些在基本数据类型上是不可能实现的。")]),s._v(" "),t("h2",{attrs:{id:"自动装箱与拆箱了解吗-原理是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自动装箱与拆箱了解吗-原理是什么"}},[s._v("#")]),s._v(" 自动装箱与拆箱了解吗？原理是什么？")]),s._v(" "),t("p",[t("strong",[s._v("装箱")]),s._v("就是将基本类型用它们对应的引用类型包装起来，原理是调用了包装类的 "),t("code",[s._v("valueOf()")]),s._v(" 方法；")]),s._v(" "),t("p",[t("strong",[s._v("拆箱")]),s._v("是将包装类型转换为基本数据类型，相应的调用的是 "),t("code",[s._v("xxxValue()")]),s._v(" 方法，比如 "),t("code",[s._v("intValue()")]),s._v(" 方法。")]),s._v(" "),t("blockquote",[t("p",[s._v("eg：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Integer i = 10")]),s._v(" 等价于 "),t("code",[s._v("Integer i = Integer.valueOf(10)")]),s._v(" -- 装箱")]),s._v(" "),t("li",[t("code",[s._v("int n = i")]),s._v(" 等价于 "),t("code",[s._v("int n = i.intValue()")]),s._v(" -- 拆箱")])])]),s._v(" "),t("p",[t("em",[s._v("原理：")])]),s._v(" "),t("p",[s._v("基本类型与相应的包装类型用 "),t("code",[s._v("==")]),s._v(" 号比较会怎么样？")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 false，因为比较的是引用")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出 true，因为自动拆箱后比较的是值")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br")])]),t("h2",{attrs:{id:"为什么浮点数运算的时候会有精度丢失的风险"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么浮点数运算的时候会有精度丢失的风险"}},[s._v("#")]),s._v(" 为什么浮点数运算的时候会有精度丢失的风险？")]),s._v(" "),t("p",[s._v("浮点数运算精度丢失代码演示：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.0f")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.9f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("float")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.8f")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.7f")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0.100000024")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0.099999905")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("这是因为计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。")]),s._v(" "),t("h2",{attrs:{id:"如何解决浮点数运算的精度丢失问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何解决浮点数运算的精度丢失问题"}},[s._v("#")]),s._v(" 如何解决浮点数运算的精度丢失问题？")]),s._v(" "),t("p",[s._v("使用 "),t("code",[s._v("BigDecimal")]),s._v(" 可以实现对浮点数的运算，并且不会造成精度丢失。")]),s._v(" "),t("p",[s._v("通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 "),t("code",[s._v("BigDecimal")]),s._v(" 来做的。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1.0"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.9"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.8"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subtract")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// sub 减法")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigDecimal")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("subtract")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 0.1 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* 0.1 */")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Objects")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("equals")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* true */")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h2",{attrs:{id:"超过-long-整型的数据应该如何表示"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#超过-long-整型的数据应该如何表示"}},[s._v("#")]),s._v(" 超过 long 整型的数据应该如何表示？")]),s._v(" "),t("blockquote",[t("p",[s._v("基本数值类型都有一个表达范围，如果超过这个范围就会有"),t("strong",[s._v("数值溢出")]),s._v("的风险。")]),s._v(" "),t("p",[s._v("在 Java 中，64 位（8字节） long 整型是最大的整数类型。")])]),s._v(" "),t("p",[s._v("如果需要表示超过 long 整型的数据，"),t("strong",[s._v("可以使用 Java 提供的 "),t("code",[s._v("BigInteger")]),s._v(" 类")]),s._v("。")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token import"}},[t("span",{pre:!0,attrs:{class:"token namespace"}},[s._v("java"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")])]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigIntegerDemo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" a "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"12345678901234567890"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"98765432109876543210"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BigInteger")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("BigInteger")]),s._v(" 类的加、减、乘、除等运算都是通过调用方法来实现的，而不是像基本数据类型那样使用运算符。")]),s._v(" "),t("li",[t("code",[s._v("BigInteger")]),s._v(" 内部使用 "),t("code",[s._v("int[]")]),s._v(" 数组来存储任意大小的整形数据。")]),s._v(" "),t("li",[s._v("需要注意的是，"),t("strong",[s._v("BigInteger")]),s._v(" 类的运算时间和空间成本比基本数据类型高得多，即运算的效率相对较低。")])]),s._v(" "),t("h2",{attrs:{id:"什么是引用类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是引用类型"}},[s._v("#")]),s._v(" 什么是引用类型？")]),s._v(" "),t("p",[s._v("在 Java 中，除了基本数据类型和 "),t("code",[s._v("void")]),s._v(" 类型以外，其它所有类型都是引用类型。")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("void")]),s._v(" 类型是一种特殊的类型，它表示没有返回值的方法或表达式的类型。")]),s._v(" "),t("li",[s._v("在 Java 中，"),t("code",[s._v("void")]),s._v(" 类型不属于基本数据类型，也不属于引用类型，而是一种独立的类型。")])]),s._v(" "),t("p",[s._v("常见的引用类型包括：")]),s._v(" "),t("ol",[t("li",[s._v("类类型（Class）：代表类的类型。")]),s._v(" "),t("li",[s._v("接口类型（Interface）：代表接口的类型。")]),s._v(" "),t("li",[s._v("数组类型（Array）：代表数组的类型。")]),s._v(" "),t("li",[s._v("枚举类型（Enum）：代表枚举的类型。")]),s._v(" "),t("li",[s._v("泛型类型（Generics）：代表泛型类或泛型方法的类型。")]),s._v(" "),t("li",[s._v("注解类型（Annotation）：代表注解的类型。")]),s._v(" "),t("li",[s._v("自定义类型（Custom）：在程序中自定义的类型，如自定义的类、接口、枚举等。")])]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" obj "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用 new 关键字创建 MyClass 类的对象，并将对象赋值给 obj 变量")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("此时，obj 变量存储的是对象的内存地址，即对象的引用。因此，通过 obj 变量可以访问对象的属性和方法。")]),s._v(" "),t("h2",{attrs:{id:"npe-问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#npe-问题"}},[s._v("#")]),s._v(" NPE 问题？")]),s._v(" "),t("p",[s._v("NPE 问题就是：空指针异常（NullPointerException，NPE）问题。")]),s._v(" "),t("p",[s._v("在 Java 中，自动拆箱是将包装类型自动转换为相应的基本数据类型的过程，而如果包装类型为null，自动拆箱就会引发空指针异常（NullPointerException，NPE）。")]),s._v(" "),t("p",[s._v("这是因为基本数据类型不支持为 null 值，因此在尝试使用为 null 的包装类型时，Java 会尝试将其转换为基本数据类型，从而引发 NPE 异常。")]),s._v(" "),t("p",[s._v("以下是一个简单的示例，展示了自动拆箱引发 NP E问题的情况：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 自动拆箱，将null转换为int类型，引发NPE异常")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("为了避免自动拆箱引发的 NPE 问题，"),t("strong",[s._v("可以使用条件语句或显式拆箱来检查包装类型是否为 null")]),s._v("。例如，可以使用以下代码检查包装类型是否为 null：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 条件语句")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("使用显式拆箱的代码如下：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 显示拆箱")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),s._v(" num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("intValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("可以看出来，两者代码差不多，在这里其实 "),t("code",[s._v("num")]),s._v(" 等价于 "),t("code",[s._v("num.intValue()")]),s._v("。")]),s._v(" "),t("p",[s._v("最后这个代码没加括号是因为：在 Java 中，三目运算符（"),t("code",[s._v("?:")]),s._v("）的优先级比赋值运算符（"),t("code",[s._v("=")]),s._v("）高，而比相等运算符（"),t("code",[s._v("==")]),s._v("）和不等运算符（"),t("code",[s._v("!=")]),s._v("）低。因此，"),t("code",[s._v("num != null")]),s._v(" 会先执行，代码可以不加括号而直接编写。")])])}),[],!1,null,null,null);a.default=e.exports}}]);