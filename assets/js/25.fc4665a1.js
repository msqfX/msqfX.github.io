(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{351:function(s,a,t){"use strict";t.r(a);var n=t(0),e=Object(n.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"map-集合详解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#map-集合详解"}},[s._v("#")]),s._v(" Map 集合详解")]),s._v(" "),t("h2",{attrs:{id:"hashmap-和-hashtable-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashtable-的区别"}},[s._v("#")]),s._v(" HashMap 和 Hashtable 的区别")]),s._v(" "),t("p",[t("strong",[s._v("线程安全性：")])]),s._v(" "),t("p",[t("code",[s._v("HashMap")]),s._v(" 是非线程安全的，"),t("code",[s._v("Hashtable")]),s._v(" 是线程安全的,因为 "),t("code",[s._v("Hashtable")]),s._v(" 内部的方法基本都经过"),t("code",[s._v("synchronized")]),s._v(" 修饰。（如果你要保证线程安全的话就使用 "),t("code",[s._v("ConcurrentHashMap")]),s._v(" 吧！）；")]),s._v(" "),t("p",[t("strong",[s._v("效率：")])]),s._v(" "),t("p",[s._v("因为线程安全的问题，"),t("code",[s._v("HashMap")]),s._v(" 要比 "),t("code",[s._v("Hashtable")]),s._v(" 效率高一点。另外，"),t("code",[s._v("Hashtable")]),s._v(" "),t("strong",[s._v("基本被淘汰，不要在代码中使用它")]),s._v("；")]),s._v(" "),t("p",[t("strong",[s._v("对 null 键 和 null 值 的支持：")])]),s._v(" "),t("p",[t("code",[s._v("HashMap")]),s._v(" 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个；Hashtable 不允许有 null 键和 null 值，否则会抛出 "),t("code",[s._v("NullPointerException")]),s._v("。")]),s._v(" "),t("p",[t("strong",[s._v("初始容量大小和每次扩充容量大小的不同 ：")])]),s._v(" "),t("p",[s._v("① 创建时如果不指定容量初始值，"),t("code",[s._v("Hashtable")]),s._v(" 默认的初始大小为 "),t("strong",[s._v("11")]),s._v("，之后每次扩充，容量变为原来的 "),t("strong",[s._v("2n+1")]),s._v("。"),t("code",[s._v("HashMap")]),s._v(" 默认的初始化大小为 "),t("strong",[s._v("16")]),s._v("。之后每次扩充，容量变为"),t("strong",[s._v("原来的 2 倍")]),s._v("。")]),s._v(" "),t("p",[s._v("② 创建时如果给定了容量初始值，那么 "),t("code",[s._v("Hashtable")]),s._v(" 会直接使用你给定的大小，而 "),t("code",[s._v("HashMap")]),s._v(" 会将其扩充为 2 的幂次方大小（"),t("code",[s._v("HashMap")]),s._v(" 中的"),t("code",[s._v("tableSizeFor()")]),s._v("方法保证，利用右位移运算）。也就是说 "),t("code",[s._v("HashMap")]),s._v(" 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。")]),s._v(" "),t("p",[t("strong",[s._v("底层数据结构：")])]),s._v(" "),t("ul",[t("li",[t("p",[s._v("JDK1.8 以后的 "),t("code",[s._v("HashMap")]),s._v(" 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）时，将链表转化为红黑树（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树），以减少搜索时间（后文中我会结合源码对这一过程进行分析）。")]),s._v(" "),t("blockquote",[t("p",[s._v("桶数组是用来存储数据元素，链表是用来解决冲突，红黑树是为了提高查询的效率。")])])]),s._v(" "),t("li",[t("p",[t("code",[s._v("Hashtable")]),s._v(" 没有这样的机制。")])])]),s._v(" "),t("h2",{attrs:{id:"hashmap-和-hashset-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset-区别"}},[s._v("#")]),s._v(" HashMap 和 HashSet 区别")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cmty256.github.io/imgs-blog/images/image-20230412165201719.2bc46rnd9474.jpg",alt:"image-20230412165201719"}})]),s._v(" "),t("p",[t("em",[s._v("用途：")])]),s._v(" "),t("ul",[t("li",[s._v("HashMap：用于存储键值对（Key-Value）映射关系的数据结构，其中每个键唯一对应一个值。")]),s._v(" "),t("li",[s._v("HashSet：用于存储不重复元素的集合，它基于 HashMap 实现，只存储元素而没有键值对的映射关系。")])]),s._v(" "),t("p",[t("em",[s._v("存储方式：")])]),s._v(" "),t("ul",[t("li",[s._v("HashMap：存储键值对，通过键查找值。键可以是任何非空对象，值可以是任何对象。")]),s._v(" "),t("li",[s._v("HashSet：存储不重复的元素，通过元素本身来进行查找和判重。")])]),s._v(" "),t("p",[t("em",[s._v("内部实现：")])]),s._v(" "),t("ul",[t("li",[s._v("HashMap：内部使用数组和链表（或红黑树）的组合来实现，通过哈希函数将键映射到数组的索引位置，以提高键的查找效率。")]),s._v(" "),t("li",[s._v("HashSet：基于 HashMap 实现，它的元素就是 HashMap 的键，值则是一个固定的常量（一直是一个 Object 对象）。")])]),s._v(" "),t("p",[t("em",[s._v("操作和用法")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("HashMap：适用于需要存储键值对关系的情况，例如缓存、映射关系等。")]),s._v(" "),t("li",[s._v("HashSet：适用于存储不重复元素的情况，例如需要快速判断某个元素是否存在等。")])]),s._v(" "),t("p",[t("em",[s._v("性能")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("HashMap：相对于 HashSet，HashMap 需要存储键值对，因此额外占用一些内存，但可以存储更多的信息。")]),s._v(" "),t("li",[s._v("HashSet：相对于 HashMap，HashSet 只需要存储元素，占用的内存较少，但不能存储键值对关系。")])]),s._v(" "),t("p",[s._v("总之，HashMap 适用于存储键值对关系，而 HashSet 适用于存储不重复元素的集合。实际上，HashSet 在内部使用了 HashMap 来实现，它们之间存在一定的关联和相似性。")]),s._v(" "),t("h2",{attrs:{id:"hashcode-源码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashcode-源码"}},[s._v("#")]),s._v(" hashCode 源码")]),s._v(" "),t("p",[t("code",[s._v("hashCode()")]),s._v(" 方法返回的值是一个 "),t("code",[s._v("int")]),s._v(" 类型的数字，用于表示对象的哈希值。这个哈希值不一定是对象的地址，也不一定是唯一的。在计算哈希值时，一般会使用对象的属性来计算。例如，如果一个 "),t("code",[s._v("Person")]),s._v(" 类具有 "),t("code",[s._v("name")]),s._v(" 和 "),t("code",[s._v("age")]),s._v(" 两个属性，那么可以将它们的哈希值合并起来计算：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hashCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("hashCode")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" result "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("这段代码中使用了一个经典的哈希算法，称为“31 哈希法”。"),t("strong",[s._v("这个算法将初始值设为一个质数 17，然后将属性的哈希值依次乘以 31 并相加，得到最终的哈希值。由于 31 是一个奇素数，可以保证乘法过程不会产生哈希冲突。")])]),s._v(" "),t("blockquote",[t("p",[s._v("需要注意的是，虽然哈希值不一定是地址，但是在 Java 中，如果没有为对象指定 "),t("code",[s._v("hashCode()")]),s._v(" 方法的实现，那么默认情况下，它的 "),t("code",[s._v("hashCode()")]),s._v(" 方法会返回对象的地址，因此在这种情况下，两个对象的哈希值可能会相同，但这并不是一个好的哈希算法。因此，在实现自定义的哈希算法时，需要保证哈希值的分布尽可能均匀，并且不容易产生哈希冲突。")])]),s._v(" "),t("h2",{attrs:{id:"为什么哈希函数能降低哈希碰撞"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么哈希函数能降低哈希碰撞"}},[s._v("#")]),s._v(" 为什么哈希函数能降低哈希碰撞？")]),s._v(" "),t("p",[s._v("因为好的哈希函数可以将输入的数据均匀、随机地映射到哈希空间，降低了碰撞的可能性，从而提高了哈希表等数据结构的性能和稳定性。")]),s._v(" "),t("h2",{attrs:{id:"hashmap-和-treemap-区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-treemap-区别"}},[s._v("#")]),s._v(" HashMap 和 TreeMap 区别")]),s._v(" "),t("p",[t("code",[s._v("TreeMap")]),s._v(" 和"),t("code",[s._v("HashMap")]),s._v(" 都继承自"),t("code",[s._v("AbstractMap")]),s._v(" ，但是需要注意的是"),t("code",[s._v("TreeMap")]),s._v("它还实现了"),t("code",[s._v("NavigableMap")]),s._v("接口和"),t("code",[s._v("SortedMap")]),s._v(" 接口。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://cmty256.github.io/imgs-blog/images/image-20230414162045562.59ky7y3jbgs0.jpg",alt:"image-20230414162045562"}})]),s._v(" "),t("p",[s._v("实现 "),t("code",[s._v("NavigableMap")]),s._v(" 接口让 "),t("code",[s._v("TreeMap")]),s._v(" 有了"),t("strong",[s._v("对集合内元素的搜索的能力")]),s._v("。")]),s._v(" "),t("p",[s._v("实现"),t("code",[s._v("SortedMap")]),s._v("接口让 "),t("code",[s._v("TreeMap")]),s._v(" 有了"),t("strong",[s._v("对集合中的元素根据键排序的能力")]),s._v("。默认是按 key 的升序排序，不过我们也可以指定排序的比较器。示例代码如下：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" treeMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comparator")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[s._v("@Override")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" person1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),s._v(" person2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" person1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" person2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n                "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        treeMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"person1"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        treeMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"person2"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        treeMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"person3"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        treeMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"person4"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        treeMap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("entrySet")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("stream")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("forEach")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("personStringEntry "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("personStringEntry"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getValue")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br")])]),t("p",[s._v("可以看出，"),t("code",[s._v("TreeMap")]),s._v(" 中的元素已经是按照 "),t("code",[s._v("Person")]),s._v(" 的 age 字段的升序来排列了。")]),s._v(" "),t("p",[s._v("上面，我们是通过传入"),t("strong",[s._v("匿名内部类")]),s._v("的方式实现的，你可以将代码替换成 "),t("strong",[s._v("Lambda 表达式")]),s._v("实现的方式：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" treeMap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TreeMap")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" person2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("->")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" num "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" person1"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" person2"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("getAge")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("compare")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("综上，相比于"),t("code",[s._v("HashMap")]),s._v("来说 "),t("code",[s._v("TreeMap")]),s._v(" 主要多了"),t("strong",[s._v("对集合中的元素根据键排序的能力")]),s._v("（"),t("code",[s._v("SortedMap")]),s._v("）以及"),t("strong",[s._v("对集合内元素的搜索的能力")]),s._v("（"),t("code",[s._v("NavigableMap")]),s._v("）。")]),s._v(" "),t("h2",{attrs:{id:"hashset-如何检查重复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashset-如何检查重复"}},[s._v("#")]),s._v(" HashSet 如何检查重复?")]),s._v(" "),t("blockquote",[t("p",[s._v("当你把对象加入"),t("code",[s._v("HashSet")]),s._v("时，"),t("code",[s._v("HashSet")]),s._v(" 会先计算对象的"),t("code",[s._v("hashcode")]),s._v("值来判断对象加入的位置，同时也会与其他加入的对象的 "),t("code",[s._v("hashcode")]),s._v(" 值作比较，如果没有相符的 "),t("code",[s._v("hashcode")]),s._v("，"),t("code",[s._v("HashSet")]),s._v(" 会假设对象没有重复出现。但是如果发现有相同 "),t("code",[s._v("hashcode")]),s._v(" 值的对象，这时会调用"),t("code",[s._v("equals()")]),s._v("方法来检查 "),t("code",[s._v("hashcode")]),s._v(" 相等的对象是否真的相同。如果两者相同，"),t("code",[s._v("HashSet")]),s._v(" 就不会让加入操作成功。")])]),s._v(" "),t("p",[s._v("直接看一下"),t("code",[s._v("HashSet")]),s._v("中的源码：")]),s._v(" "),t("p",[s._v("在 JDK1.8 中，实际上无论 HashSet 中是否已经存在了某元素，HashSet 都会直接插入，只是会在 "),t("code",[s._v("add()")]),s._v(" 方法的返回值处告诉我们插入前是否存在相同元素")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Returns: true if this set did not already contain the specified element")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 返回值：当 set 中没有包含 add 的元素时返回真")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("boolean")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("E")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" map"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("put")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("PRESENT")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])]),t("p",[s._v("HashSet 通过 HashMap 的键的唯一性来实现对元素的重复检查。在 HashSet 中，元素被存储为 HashMap 的键，而值都是固定的一个常量对象。当我们向 HashSet 添加元素时，实际上是将这个元素作为键，常量对象作为对应的值存储在 HashMap 中。")]),s._v(" "),t("p",[s._v("在 HashMap 中，键是唯一的，这意味着当我们尝试将相同的元素作为键添加到 HashMap 中时，新的元素会覆盖掉旧的元素。因此，当我们向 HashSet 添加元素时，实际上是在利用 HashMap 的去重特性来保证 HashSet 中的元素唯一性。")]),s._v(" "),t("p",[s._v("例如，考虑以下代码：")]),s._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Integer")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("HashSet")]),t("span",{pre:!0,attrs:{class:"token generics"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nset"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 尝试添加重复元素")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("set"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("size")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 输出为 3，因为重复元素被去重")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("p",[s._v("在上述示例中，尝试向 HashSet 中添加重复的元素 1 时，并没有导致 HashSet 中出现重复元素，这是因为 HashSet 利用了 HashMap 的键唯一性来进行去重。")]),s._v(" "),t("p",[s._v("因此，HashSet 能够自动检查并防止重复元素的存在。")]),s._v(" "),t("h2",{attrs:{id:"hashmap的底层实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap的底层实现"}},[s._v("#")]),s._v(" HashMap的底层实现")]),s._v(" "),t("h3",{attrs:{id:"jdk1-8-之前"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-之前"}},[s._v("#")]),s._v(" JDK1.8 之前")]),s._v(" "),t("p",[s._v("JDK1.8 之前 "),t("code",[s._v("HashMap")]),s._v(" 底层是 "),t("strong",[s._v("数组和链表")]),s._v(" 结合在一起使用也就是 "),t("strong",[s._v("链表散列")]),s._v("。HashMap 通过 key 的 "),t("code",[s._v("hashcode")]),s._v(" 经过"),t("strong",[s._v("扰动函数（hash方法）"),t("strong",[s._v("处理过后得到 hash 值，然后通过 "),t("code",[s._v("(n - 1) & hash")]),s._v(" 判断当前元素存放的位置（这里的 n 指的是数组的长度），如果当前位置存在元素的话，就判断该元素与要存入的元素的 hash 值以及 key 是否相同，如果相同的话，直接覆盖，不相同就通过")]),s._v("拉链法（数组+链表）解决冲突")]),s._v("。")]),s._v(" "),t("h3",{attrs:{id:"jdk1-8-之后"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-之后"}},[s._v("#")]),s._v(" JDK1.8 之后")]),s._v(" "),t("p",[s._v("相比于之前的版本， JDK1.8 之后在解决哈希冲突时有了较大的变化，当"),t("strong",[s._v("链表长度大于阈值（默认为 8）")]),s._v("（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，"),t("strong",[s._v("将链表转化为红黑树")]),s._v("，以减少搜索时间。")]),s._v(" "),t("blockquote",[t("p",[s._v("TreeMap、TreeSet 以及 JDK1.8 之后的 HashMap 底层都用到了红黑树。红黑树就是为了解决二叉查找树的缺陷，因为二叉查找树在某些情况下会退化成一个线性结构。")])]),s._v(" "),t("h3",{attrs:{id:"jdk1-7和jdk1-8的hash方法源码对比"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-7和jdk1-8的hash方法源码对比"}},[s._v("#")]),s._v(" JDK1.7和JDK1.8的hash方法源码对比：")]),s._v(" "),t("ol",[t("li",[s._v("JDK 1.8 的 hash 方法 （运用了三目运算符）相比于 JDK 1.7 hash 方法更加简化，但是原理不变；")]),s._v(" "),t("li",[s._v("JDK 1.7 的 hash 方法的性能会稍差一点点，因为扰动了 4 次")])]),s._v(" "),t("p",[s._v("使用扰动函数（hash方法）之后可以减少碰撞")]),s._v(" "),t("h2",{attrs:{id:"hashmap-的长度为什么是-2-的幂次方"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的长度为什么是-2-的幂次方"}},[s._v("#")]),s._v(" HashMap 的长度为什么是 2 的幂次方")]),s._v(" "),t("p",[s._v("这是因为 HashMap 在"),t("strong",[s._v("计算 key 的哈希值后，需要通过哈希值和数组长度计算出该 key 在数组中的位置")]),s._v("。")]),s._v(" "),t("p",[s._v("具体的计算方式是 "),t("code",[s._v("(n - 1) & hash")]),s._v("（数组的长度减一的差和 key 的哈希值相与），其中 "),t("code",[s._v("n")]),s._v(" 是数组的长度，"),t("code",[s._v("hash")]),s._v(" 是 key 的哈希值。")]),s._v(" "),t("p",[s._v("这个计算方式的作用是将哈希值的高位和低位进行一次"),t("em",[s._v("异或")]),s._v("运算，得到 key 在数组中的位置。 如果数组的长度不是 2 的幂次方，那么在计算 "),t("code",[s._v("(n - 1) & hash")]),s._v(" 时，得到的结果可能会存在一些"),t("strong",[s._v("哈希值无法均匀分布到数组中的位置的情况")]),s._v("，从而导致某些位置上的链表或红黑树会变得过长，影响 HashMap 的性能。因此，"),t("strong",[s._v("为了避免这种情况的发生")]),s._v("，HashMap 的长度总是保持为 2 的幂次方。 另外，对于长度为 2 的幂次方的数组，计算 "),t("code",[s._v("(n - 1) & hash")]),s._v(" 时，"),t("strong",[s._v("等价于对数组长度取模，这种计算方式的效率比较高，而且可以保证均匀分布")]),s._v("。因此，HashMap 采用长度为 2 的幂次方的数组，"),t("strong",[s._v("可以提高 HashMap 的性能和效率")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"hashmap-多线程操作导致死循环问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-多线程操作导致死循环问题"}},[s._v("#")]),s._v(" HashMap 多线程操作导致死循环问题")]),s._v(" "),t("p",[s._v("在多线程环境下，如果多个线程同时对 HashMap 进行操作，可能会导致 HashMap 的链表或红黑树出现环形，从而导致死循环问题。这种问题通常发生在以下情况下：")]),s._v(" "),t("ol",[t("li",[s._v("多个线程同时调用 "),t("code",[s._v("put()")]),s._v(" 方法，导致链表或红黑树的结构发生变化，从而导致链表或红黑树出现环形。")]),s._v(" "),t("li",[s._v("多个线程同时调用 "),t("code",[s._v("resize()")]),s._v(" 方法，导致数组扩容时链表或红黑树的结构发生变化，从而导致链表或红黑树出现环形。 当出现链表或红黑树环形时，会导致 HashMap 的遍历操作进入死循环，从而影响程序的性能和可靠性。")])]),s._v(" "),t("p",[s._v("为了解决这个问题，可以采用以下几种方式：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("使用线程安全的 ConcurrentHashMap")]),s._v("，它是线程安全的 HashMap，可以安全地在多线程环境下进行操作。")]),s._v(" "),t("li",[s._v("对于需要在多线程环境下使用 HashMap 的情况，可以"),t("strong",[s._v("使用锁")]),s._v("来保证同一时间只有一个线程能够对 HashMap 进行操作。")]),s._v(" "),t("li",[s._v("避免多个线程同时对 HashMap 进行操作，可以将对 HashMap 的操作"),t("strong",[s._v("放在同步块中")]),s._v("，确保同一时间只有一个线程能够对 HashMap 进行修改。")]),s._v(" "),t("li",[s._v("通过使用线程安全的并发数据结构，例如 ConcurrentLinkedQueue、ConcurrentHashMap 等，避免在多线程环境下使用 HashMap。")])]),s._v(" "),t("h2",{attrs:{id:"hashmap-有哪几种常见的遍历方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-有哪几种常见的遍历方式"}},[s._v("#")]),s._v(" HashMap 有哪几种常见的遍历方式?")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://mp.weixin.qq.com/s/zQBN3UvJDhRTKP6SzcZFKw",target:"_blank",rel:"noopener noreferrer"}},[s._v("HashMap 的 7 种遍历方式与性能分析！"),t("OutboundLink")],1)]),s._v(" "),t("h2",{attrs:{id:"concurrenthashmap-和-hashtable-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-和-hashtable-的区别"}},[s._v("#")]),s._v(" ConcurrentHashMap 和 Hashtable 的区别")]),s._v(" "),t("p",[t("code",[s._v("ConcurrentHashMap")]),s._v(" 和 "),t("code",[s._v("Hashtable")]),s._v(" 都是线程安全的集合类，但是它们在实现和性能上有一些区别：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("底层数据结构：")]),s._v(" "),t("ul",[t("li",[s._v("JDK1.7 的 "),t("code",[s._v("ConcurrentHashMap")]),s._v(" 底层采用 "),t("strong",[s._v("分段的数组+链表")]),s._v(" 实现，JDK1.8 采用的数据结构跟 "),t("code",[s._v("HashMap1.8")]),s._v(" 的结构一样，数组+链表/红黑二叉树。")]),s._v(" "),t("li",[t("code",[s._v("Hashtable")]),s._v(" 和 JDK1.8 之前的 "),t("code",[s._v("HashMap")]),s._v(" 的底层数据结构类似都是采用 "),t("strong",[s._v("数组+链表")]),s._v(" 的形式，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突而存在的；")])])]),s._v(" "),t("li",[t("strong",[s._v("实现线程安全的方式（"),t("em",[s._v("重要")]),s._v("）：")])])]),s._v(" "),t("ul",[t("li",[s._v("在 JDK1.7 的时候，"),t("code",[s._v("ConcurrentHashMap")]),s._v(" 对整个桶数组进行了分割分段("),t("code",[s._v("Segment")]),s._v("，"),t("em",[s._v("分段锁")]),s._v(")，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。")]),s._v(" "),t("li",[s._v("到了 JDK1.8 的时候，"),t("code",[s._v("ConcurrentHashMap")]),s._v(" 已经摒弃了 "),t("code",[s._v("Segment")]),s._v(" 的概念，而是直接用 "),t("code",[s._v("Node")]),s._v(" 数组+链表 / 红黑树的数据结构来实现，并发控制使用 "),t("code",[s._v("synchronized")]),s._v(" 和 "),t("code",[s._v("CAS")]),s._v(" 来操作。（JDK1.6 以后 "),t("code",[s._v("synchronized")]),s._v(" 锁做了很多优化） 整个看起来就像是优化过且线程安全的 "),t("code",[s._v("HashMap")]),s._v("，虽然在 JDK1.8 中还能看到 "),t("code",[s._v("Segment")]),s._v(" 的数据结构，但是已经简化了属性，只是为了兼容旧版本；")]),s._v(" "),t("li",[t("code",[s._v("Hashtable")]),s._v("("),t("em",[s._v("同一把锁")]),s._v("): 使用 "),t("code",[s._v("synchronized")]),s._v(" 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用 put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。")])]),s._v(" "),t("ol",{attrs:{start:"3"}},[t("li",[t("p",[t("strong",[s._v("对 null 值的支持不同")]),s._v("：")]),s._v(" "),t("ul",[t("li",[t("code",[s._v("Hashtable")]),s._v(" 不允许 "),t("code",[s._v("key")]),s._v(" 为 "),t("code",[s._v("null")]),s._v("，")]),s._v(" "),t("li",[s._v("而 "),t("code",[s._v("ConcurrentHashMap")]),s._v(" 则**（ JDK7 时）**允许 "),t("code",[s._v("key")]),s._v(" 和 value 均为 "),t("code",[s._v("null")]),s._v("，"),t("strong",[s._v("JDK8 后不再允许")]),s._v("（因为使用了 CAS -- 保证线程安全的，对 "),t("code",[s._v("null")]),s._v(" 值的支持发生了变化）。")])])]),s._v(" "),t("li",[t("p",[t("strong",[s._v("扩容机制不同：")]),t("code",[s._v("Hashtable")]),s._v(" 在扩容时使用的是原来容量的 2 倍加 1，而 "),t("code",[s._v("ConcurrentHashMap")]),s._v(" 在扩容时采用的则是分段锁技术，当一个段需要进行扩容时，只需要锁定这个段，而不需要锁定整个哈希表。")]),s._v(" "),t("blockquote",[t("p",[t("code",[s._v("ConcurrentHashMap")]),s._v(" 在设计上更加注重并发性能，通过分段锁来"),t("strong",[s._v("减小锁粒度")]),s._v("，而不是仅对一个段进行扩容。")])])])]),s._v(" "),t("h2",{attrs:{id:"concurrenthashmap-线程安全底层具体实现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-线程安全底层具体实现"}},[s._v("#")]),s._v(" ConcurrentHashMap 线程安全底层具体实现")]),s._v(" "),t("h3",{attrs:{id:"jdk1-8-之前-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-之前-2"}},[s._v("#")]),s._v(" JDK1.8 之前")]),s._v(" "),t("p",[t("strong",[t("code",[s._v("ConcurrentHashMap")]),s._v(" 是由 "),t("code",[s._v("Segment")]),s._v(" 数组结构和 "),t("code",[s._v("HashEntry")]),s._v(" 数组结构组成")]),s._v("。")]),s._v(" "),t("p",[t("code",[s._v("Segment")]),s._v(" 继承了 "),t("code",[s._v("ReentrantLock")]),s._v(",所以 "),t("code",[s._v("Segment")]),s._v(" 是一种可重入锁，扮演锁的角色。"),t("code",[s._v("HashEntry")]),s._v(" 用于存储键值对数据。")]),s._v(" "),t("p",[s._v("一个 "),t("code",[s._v("ConcurrentHashMap")]),s._v(" 里包含一个 "),t("code",[s._v("Segment")]),s._v(" 数组，"),t("code",[s._v("Segment")]),s._v(" 的个数一旦"),t("strong",[s._v("初始化就不能改变")]),s._v("。 "),t("code",[s._v("Segment")]),s._v(" 数组的大小默认是 16，也就是说默认可以同时支持 16 个线程并发写。")]),s._v(" "),t("p",[t("code",[s._v("Segment")]),s._v(" 的结构和 "),t("code",[s._v("HashMap")]),s._v(" 类似，是一种数组和链表结构，一个 "),t("code",[s._v("Segment")]),s._v(" 包含一个 "),t("code",[s._v("HashEntry")]),s._v(" 数组，每个 "),t("code",[s._v("HashEntry")]),s._v(" 是一个链表结构的元素，每个 "),t("code",[s._v("Segment")]),s._v(" 守护着一个 "),t("code",[s._v("HashEntry")]),s._v(" 数组里的元素，当对 "),t("code",[s._v("HashEntry")]),s._v(" 数组的数据进行修改时，必须首先获得对应的 "),t("code",[s._v("Segment")]),s._v(" 的锁。也就是说，对同一 "),t("code",[s._v("Segment")]),s._v(" 的并发写入会被阻塞，不同 "),t("code",[s._v("Segment")]),s._v(" 的写入是可以并发执行的。")]),s._v(" "),t("h3",{attrs:{id:"jdk1-8-之后-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk1-8-之后-2"}},[s._v("#")]),s._v(" JDK1.8 之后")]),s._v(" "),t("ul",[t("li",[s._v("Java 8 几乎完全重写了 "),t("code",[s._v("ConcurrentHashMap")]),s._v("，代码量从原来 Java 7 中的 1000 多行，变成了现在的 6000 多行。")]),s._v(" "),t("li",[t("code",[s._v("ConcurrentHashMap")]),s._v(" 取消了 "),t("code",[s._v("Segment")]),s._v(" 分段锁，采用 "),t("code",[s._v("Node + CAS + synchronized")]),s._v(" 来保证并发安全。数据结构跟 "),t("code",[s._v("HashMap")]),s._v(" 1.8 的结构类似，数组+链表/红黑二叉树。Java 8 在链表长度超过一定阈值（8）时将链表（寻址时间复杂度为 O(N)）转换为红黑树（寻址时间复杂度为 O(log(N))）。")]),s._v(" "),t("li",[s._v("Java 8 中，"),t("strong",[s._v("锁粒度")]),s._v("更细，"),t("code",[s._v("synchronized")]),s._v(" 只锁定当前链表或红黑二叉树的首节点，这样只要 hash 不冲突，就不会产生并发，就不会影响其他 Node 的读写，效率大幅提升。")])]),s._v(" "),t("h3",{attrs:{id:"锁粒度解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#锁粒度解析"}},[s._v("#")]),s._v(" 锁粒度解析")]),s._v(" "),t("p",[s._v("锁粒度指的是锁定的范围大小，通常分为粗粒度锁和细粒度锁两种类型。")]),s._v(" "),t("ol",[t("li",[s._v("粗粒度锁 粗粒度锁指的是"),t("strong",[s._v("锁定范围较大的锁，通常是对整个对象或整个方法进行加锁")]),s._v("。粗粒度锁的优点是实现简单，易于控制，缺点是锁定范围太大，会导致并发性能下降，降低程序的并发度。")]),s._v(" "),t("li",[s._v("细粒度锁 细粒度锁指的是"),t("strong",[s._v("锁定范围较小的锁，通常是对对象中的某个属性或某一段代码进行加锁")]),s._v("。细粒度锁的优点是锁定范围小，可以提高程序的并发度，缺点是实现复杂，容易出现死锁等问题。")])]),s._v(" "),t("p",[s._v("在实际开发中，应该根据实际情况选择合适的锁粒度。"),t("strong",[s._v("如果锁的范围太大，会导致并发性能下降，如果锁的范围太小，会增加锁的竞争，降低程序的并发度")]),s._v("。"),t("strong",[s._v("可以通过压力测试等方式来确定合适的锁粒度")]),s._v("。")]),s._v(" "),t("h2",{attrs:{id:"jdk-1-7-和-jdk-1-8-的-concurrenthashmap-实现有什么不同"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#jdk-1-7-和-jdk-1-8-的-concurrenthashmap-实现有什么不同"}},[s._v("#")]),s._v(" JDK 1.7 和 JDK 1.8 的 ConcurrentHashMap 实现有什么不同？")]),s._v(" "),t("p",[t("strong",[s._v("线程安全实现方式")]),s._v(" ：")]),s._v(" "),t("ul",[t("li",[s._v("JDK 1.7 采用 "),t("code",[s._v("Segment")]),s._v(" 分段锁来保证安全， "),t("code",[s._v("Segment")]),s._v(" 是继承自 "),t("code",[s._v("ReentrantLock")]),s._v("。")]),s._v(" "),t("li",[s._v("JDK1.8 放弃了 "),t("code",[s._v("Segment")]),s._v(" 分段锁的设计，采用 "),t("code",[s._v("Node + CAS + synchronized")]),s._v(" 保证线程安全，锁粒度更细，"),t("code",[s._v("synchronized")]),s._v(" 只锁定当前链表或红黑二叉树的首节点。")])]),s._v(" "),t("p",[t("strong",[s._v("Hash 碰撞解决方法")]),s._v(" :")]),s._v(" "),t("ul",[t("li",[s._v("JDK 1.7 采用拉链法，")]),s._v(" "),t("li",[s._v("JDK1.8 采用拉链法结合红黑树（链表长度超过一定阈值时，将链表转换为红黑树）。")])]),s._v(" "),t("p",[t("strong",[s._v("并发度")]),s._v(" ：")]),s._v(" "),t("ul",[t("li",[s._v("JDK 1.7 最大并发度是 Segment 的个数，默认是 16。")]),s._v(" "),t("li",[s._v("JDK 1.8 最大并发度是 Node 数组的大小，并发度更大。")])]),s._v(" "),t("h3",{attrs:{id:"为什么-hashmap-链表转红黑树的阈值为-8-呢"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么-hashmap-链表转红黑树的阈值为-8-呢"}},[s._v("#")]),s._v(" 为什么 HashMap 链表转红黑树的阈值为 8 呢？")]),s._v(" "),t("p",[s._v("这是一个经验性的设定。这个设定是为了在哈希表中维护合适的性能和空间开销之间找到平衡。")]),s._v(" "),t("p",[s._v("选择 8 是基于一系列性能测试和实际应用场景得出的。当链表长度超过这个阈值时，链表的查找性能可能会下降，而转换为红黑树可以提高性能。然而，如果链表长度较短，转换为红黑树可能会带来额外的开销，所以选择一个合适的阈值是一个权衡。")]),s._v(" "),t("h2",{attrs:{id:"hashmap-的扩容机制了解吗"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-的扩容机制了解吗"}},[s._v("#")]),s._v(" HashMap 的扩容机制了解吗？")]),s._v(" "),t("p",[s._v("了解。当 HashMap 中的元素数量达到一定阈值时，就会触发扩容操作，以保持哈希桶的负载因子在一个合适的范围内，从而减少哈希冲突，提高查找、插入和删除的性能。")]),s._v(" "),t("p",[s._v("HashMap 的扩容机制主要包括以下 3 个步骤：")]),s._v(" "),t("ol",[t("li",[t("strong",[s._v("创建新的哈希桶数组")]),s._v("：当 HashMap 中的元素数量达到阈值时，创建一个新的数组，其大小是原数组的两倍。")]),s._v(" "),t("li",[t("strong",[s._v("将旧数据转移到新数组")]),s._v("：遍历旧的哈希桶数组中的每个元素，将其重新计算哈希值后放入新的哈希桶数组中。这是一个耗时操作，但只需要进行一次。")]),s._v(" "),t("li",[t("strong",[s._v("更新引用")]),s._v("：将 HashMap 的哈希桶数组引用指向新的数组，同时更新阈值等信息。")])]),s._v(" "),t("p",[s._v("扩容操作会在 HashMap 的插入操作中触发，具体的触发时机是当元素数量超过了负载因子乘以当前数组容量时。默认情况下，负载因子为 0.75，即当元素数量超过当前数组容量的 75% 时，会触发扩容。")]),s._v(" "),t("h3",{attrs:{id:"扩容在什么时候呢-为什么扩容因子是-0-75"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#扩容在什么时候呢-为什么扩容因子是-0-75"}},[s._v("#")]),s._v(" 扩容在什么时候呢？为什么扩容因子是 0.75？")]),s._v(" "),t("p",[s._v("HashMap 在进行扩容的时候，通常是当当前容器中的元素数量超过了容器大小的 75% 时触发扩容操作。")]),s._v(" "),t("p",[s._v("这个扩容因子（load factor）的选择是为了在空间和时间上达到一个平衡，从而保证 HashMap 在不至于浪费过多内存的情况下，仍能保持较低的哈希冲突，提供高效的查找、插入和删除操作。")]),s._v(" "),t("p",[t("em",[s._v("为什么扩容因子选择 0.75 呢？")])]),s._v(" "),t("p",[s._v("这是一个折中的选择，考虑了时间和空间的平衡。如果扩容因子设置得太小，会导致哈希冲突过多，影响了 HashMap 的性能；如果设置得太大，虽然哈希冲突可能减少，但是会导致 HashMap 占用更多的内存空间。")]),s._v(" "),t("h3",{attrs:{id:"为什么是-2-倍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-2-倍"}},[s._v("#")]),s._v(" 为什么是 2 倍？")]),s._v(" "),t("p",[s._v("使用 2 的次幂作为数组的容量可以确保 hashCode 的高位和低位能够"),t("strong",[s._v("更好地均匀分布在数组的索引位置上")]),s._v("。这样一来，在计算元素存放位置时，只需要进行位运算，而不需要使用取模等耗时的操作，提高了计算效率。")]),s._v(" "),t("p",[s._v("另外，使用 2 的次幂作为容量也方便进行扩容操作，因为 2 的次幂的二进制表示只有一个 1，这样在扩容时只需要将高位多出的 1 变为 0，就可以得到新的容量。这种设计可以减少内存空间的浪费。")]),s._v(" "),t("p",[s._v("总的来说就是：")]),s._v(" "),t("ul",[t("li",[s._v("这样设计在计算元素存放位置时可以提高计算效率；")]),s._v(" "),t("li",[s._v("在进行扩容时可以减少内存空间的浪费。")]),s._v(" "),t("li",[s._v("既提高了效率又减少了时间。")])]),s._v(" "),t("blockquote",[t("p",[s._v("高位是在左边")])])])}),[],!1,null,null,null);a.default=e.exports}}]);